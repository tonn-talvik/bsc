#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\begin_preamble
\usepackage{tocbibind}
\usepackage[svgnames]{xcolor}

\newcommand\epigraph[3]{
  \vspace{1em}\hfill{}
  \begin{minipage}{#1}{
    \noindent\textit{#2}\\[1em]
    \vspace{2em}
    \hfill{}
    {#3}}
  \end{minipage}}


\renewcommand{\lstlistingname}{Kood}
\renewcommand\lstlistlistingname{Koodiloend}

%\usepackage{showframe}

\sloppy

\setlength{\@fptop}{0pt}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language estonian
\language_package default
\inputencoding auto
\fontencoding global
\font_roman Gentium Basic
\font_sans DejaVu Sans Mono
\font_typewriter DejaVu Sans Mono
\font_default_family default
\use_non_tex_fonts true
\font_sc false
\font_osf false
\font_sf_scale 85
\font_tt_scale 85

\graphics default
\default_output_format pdf4
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize 12
\spacing single
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder false
\pdf_colorlinks false
\pdf_backref false
\pdf_pdfusetitle true
\papersize a4paper
\use_geometry true
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 0.98in
\topmargin 1.18in
\rightmargin 1.18in
\bottommargin 0.98in
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language german
\papercolumns 1
\papersides 1
\paperpagestyle default
\listings_params "frame=single,keywordstyle={\ttfamily},literate={{->}{$\rightarrow$}{1}{<-}{$\leftarrow$}{1}},numberstyle={\color{gray}},showstringspaces=false"
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
thispagestyle{empty}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
\align center
TALLINNA TEHNIKAÜLIKOOL
\begin_inset Newline newline
\end_inset

Infotehnoloogia teaduskond
\begin_inset Newline newline
\end_inset

Arvutiteaduse instituut
\begin_inset Newline newline
\end_inset

Teoreetilise informaatika õppetool
\end_layout

\begin_layout Standard
\align center
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
vfill
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
Huge{}
\end_layout

\end_inset

Simple-Pascali programmide optimeerimine Haskellis andmevooanalüüsi teegiga
 Hoopl
\end_layout

\begin_layout Standard
\align center
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
Large{}
\end_layout

\end_inset

Bakalaureusetöö
\end_layout

\begin_layout Standard
\align center
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
vfill
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\align right
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="2">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="0">
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Üliõpilane:
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Tõnn Talvik
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Üliõpilaskood:
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
073849 IAPB
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Juhendaja:
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
prof.
 Tarmo Uustalu
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
vfill
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\align center
Tallinn
\begin_inset Newline newline
\end_inset

2013
\end_layout

\begin_layout Standard
\align left
\begin_inset Newpage newpage
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
pagenumbering{Roman}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
epigraph{5cm}{If you optimize everything, you will always be unhappy.}{Donald
 Ervin Knuth}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\align left
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section*
Autorideklaratsioon
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
vspace{2cm}
\backslash
addcontentsline{toc}{section}{Autorideklaratsioon}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
Deklareerin, et käesolev lõputöö on minu töö tulemus ja seda ei ole kellegi
 teise poolt varem kaitsmisele esitatud.
\end_layout

\begin_layout Standard
\noindent
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
vspace{3cm}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="3">
<features tabularvalignment="middle" tabularwidth="100text%">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0pt">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
............................................
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hfill
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
............................................
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
(kuupäev)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
(lõputöö kaitsja allkiri)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section*
Annotatsioon
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
vspace{2cm}
\backslash
addcontentsline{toc}{section}{Annotatsioon}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Käesolev töö tutvustab andmevooanalüüsi teegi Hoopl kasutamist Haskell platvormi
l, lisades optimeerimise lihtsustatud Pascali kompilaatorile 
\emph on
Simple-Pascal
\emph default
.
 Luuakse teegi kasutamiseks sobilik vahe-esitus.
 Sooritatakse mh konstantide voltimise ja levitamise, koopiate levitamise,
 ühiste alamavaldiste eemaldamise, surnud omistamiste eemaldamise analüüsid.
 Kirjeldatakse iga optimeerimise andmevoo fakt, võre, siirdefunktsioon ja
 vahe-esituse ümberkirjutamine.
 
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section*
Abstract
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
vspace{2cm}
\backslash
addcontentsline{toc}{section}{Abstract}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This thesis describes the application of the dataflow analysis library Hoopl
 on Haskell platform by adding an optimizer to the simplified Pascal compiler
 
\emph on
Simple-Pascal
\emph default
.
 An intermediate representation is created to apply the library.
 Constant evaluation and propagation, copy propagation, common subexpression
 elimination and dead assignment elimination optimization passes are performed.
 Dataflow analysis facts, lattice, transfer function and intermediate representa
tion rewriting are described for each pass.
 
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstlistoflistings
\end_layout

\end_inset


\end_layout

\begin_layout Section*
Mõisted ja lühendid
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
addcontentsline{toc}{section}{Mõisted ja lühendid}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
arvutama --- ingl.
 evaluate
\end_layout

\begin_layout Itemize
AST --- abstraktne süntaksipuu (ingl.
 abstract syntax tree)
\end_layout

\begin_layout Itemize
f-n --- funktsioon
\end_layout

\begin_layout Itemize
IR --- vahe-esitus (ingl.
 intermediate representation)
\end_layout

\begin_layout Itemize
sooritus --- terviklik optimeerimise teostus  (ingl.
 optimization pass)
\end_layout

\begin_layout Itemize
sõne --- tähemärkide jada (ingl.
 string)
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Sissejuhatus
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
pagenumbering{arabic}
\backslash
setcounter{page}{1}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Teema valik on ajendatud huvist kasutada Haskellit ning avardada teadmisi
 funktsionaalprogrammeerimise paradigmast.
 Kompilaatori tegemine pakub hulgaliselt näiteprobleeme, sh optimeerimise.
 Pascal oli minu esimene koolis õpitud programmeerimiskeel ja kuna igapäeva
 töös kasutan selle edasiarendust Delphit, siis valisin optimeeritavaks
 keeleks just Pascali --- avaneb võimalus näha Pascali keelt ja kompilaatorit
 
\begin_inset Quotes gld
\end_inset

teiselt poolt
\begin_inset Quotes grd
\end_inset

.
 
\end_layout

\begin_layout Standard
Programmi kompileerimise, kus sisendiks on programmeerija poolt koostatud
 kõrgtaseme programmikeeles lähtetekst ja väljundiks on masinal käivitatav
 arvutiprogramm, saab jagada järgnevateks osadeks:
\end_layout

\begin_layout Enumerate
lähteteksti süntaksi kontroll ja jaotamine lekseemideks,
\end_layout

\begin_layout Enumerate
lekseemide süntaktiline parsimine ASTiks ja tüüpide kontroll,
\end_layout

\begin_layout Enumerate
ASTi transleerimine vahe-esitusse edasiseks analüüsimiseks,
\end_layout

\begin_layout Enumerate
vahe-esitusel põhinev optimeerimine konkreetsest käitusmasinast sõltumatult,
\end_layout

\begin_layout Enumerate
masinaspetsiifiline optimeerimine ja masinkeeles programmi genereerimine.
\end_layout

\begin_layout Standard
Esimese kahe osa (v.a.
 tüüpide kontroll) realiseerimiseks saab kasutada Haskelli platvormiga kaasa
 tulevaid vahendeid:
\end_layout

\begin_layout Itemize
leksikalist analüsaatorit 
\emph on
alex
\emph default

\begin_inset Foot
status collapsed

\begin_layout Plain Layout
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.haskell.org/alex/
\end_layout

\end_inset


\end_layout

\end_inset

 ja parseri generaatorit 
\emph on
happy
\emph default

\begin_inset Foot
status collapsed

\begin_layout Plain Layout
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.haskell.org/happy/
\end_layout

\end_inset


\end_layout

\end_inset

, mis vastavad keele C vahenditele 
\emph on
lex
\emph default
 ja 
\emph on
yacc
\emph default
, või 
\end_layout

\begin_layout Itemize
parserkombinaatorite teeki 
\emph on
Parsec
\emph default

\begin_inset Foot
status collapsed

\begin_layout Plain Layout
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://legacy.cs.uu.nl/daan/parsec.html
\end_layout

\end_inset


\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
Neljanda osa katmiseks on tehtud Haskelli teek Hoopl
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://research.microsoft.com/en-us/um/people/simonpj/papers/c--/hoopl-haskell10.pd
f
\end_layout

\end_inset


\end_layout

\end_inset

, mis kasutab andmevooanalüüsi meetodit.
 Andmevooanalüüsis kogutakse andmevoo fakte programmi eri punktide kohta.
 Programmist koostatakse juhtvoo graaf, mille iga sõlm seab faktidele kitsendusi.
 Saadud kitsenduste süsteem lahendatakse, leides vähim püsipunkt vastavas
 võres.
 Kogutud faktide põhjal optimeeritakse programm.
 Hea ülevaate andmevooanalüüsist annab 
\begin_inset CommandInset citation
LatexCommand cite
key "schw'09"

\end_inset

.
 Andmevooanalüüsi Hoopl-teegi näitel selgitab ka 
\begin_inset CommandInset citation
LatexCommand cite
key "inside'13"

\end_inset

.
\end_layout

\begin_layout Standard
Ilya V.
 Portnov on loonud Pascali laadse keele kompileerimiseks lihtsale magasiniga
 virtuaalmasinale (ingl.
 simple stacked virtual machine, SSVM) kompilaatori 
\emph on
Simple-Pascal
\emph default
.
 Kuna see kompilaator ei järgi Pascal-keele standardit
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
ISO 7185: The original Pascal standard, 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://pascal-central.com/docs/iso7185.pdf
\end_layout

\end_inset


\end_layout

\end_inset

 ning on oluliselt piiratum (nt puuduvad eel- ja järelkontrolliga tsüklid),
 siis tuleb seda keelt pidada 
\series bold
lihtsustatud Pascaliks
\series default
.
 
\emph on
Simple-Pascali
\emph default
 lähtekoodi põhjal koostatud grammatika, mida suudetakse parsida, on toodud
 laiendatud Backus-Naur kujul lisas 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Simple-pascal-grammatika-EBNF"

\end_inset

.
\end_layout

\begin_layout Standard
Kompilaator käitub järgnevalt: lähtekood parsitakse Parsec'iga, teostatakse
 tüüpide kontroll ja väljastatakse virtuaalmasinal käivitatav baitkood,
 mida eelnevalt ei optimeerita.
\end_layout

\begin_layout Standard
Käesolev töö lisab 
\emph on
Simple-Pascali
\emph default
 kompilaatorile Hoopl-teegil põhineva optimeerimise: eeltoodud loendis osad
 3 ja 4.
 Seejuures peetakse optimaalseks programmi, mis käivitades annab õige tulemuse,
 st sama tulemuse, mis annaks see programm ilma optimeerimiseta --- optimeerimin
e peab olema konservatiine --- ning teeb seda vähema või sama arvu masinkeele
 käskude täitmisega.
 Ei tagata käskude arvu minimaalsust, st võib leiduda veelgi 
\begin_inset Quotes gld
\end_inset

optimaalsem
\begin_inset Quotes grd
\end_inset

 programm.
 Ei uurita muutmälu ega teiste ressursside kasutust.
\end_layout

\begin_layout Section
ASTide tõlkimine vahe-esitusse
\end_layout

\begin_layout Standard
Selle osa eesmärk on transleerida 
\emph on
Simple-Pascali
\emph default
 abstraktne süntaksipuu vahe-esitusse, mis on sobilik edasiseks analüüsimiseks
 Hoopl-teegiga.
 
\end_layout

\begin_layout Subsection
Ülevaade ASTist
\end_layout

\begin_layout Standard
S
\emph on
imple-Pascali
\emph default
 abstraktse süntaksipuu ülesehitus Haskelli tüübikonstruktoritena on toodud
 koodis 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Simple-pascali-abstraktne-süntak"

\end_inset

.
 Puu sõlmed on varustatud tüübioperaatori 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

:~
\end_layout

\end_inset

 abil annotatsioonidega (read 1-4): parsimisel lisatakse sõlmedele nende
 asukoht lähtetekstis (rida ja veerg); tüübikontrollis lisatakse tüübiinformatsi
oon.
\end_layout

\begin_layout Standard

\emph on
Simple-Pascal
\emph default
 toetab 3 tüüpi literaale: täisarvud, sõned ja tõeväärtused (kood 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Simple-pascali-abstraktne-süntak"

\end_inset

, rida 6).
\end_layout

\begin_layout Standard
Avaldised koosnevad (kood 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Simple-pascali-abstraktne-süntak"

\end_inset

): muutujatest (rida 9), massiivi elemendi või kirje välja väärtuse kasutamisest
 (read 10-11), literaalidest (rida 12), funktsiooni väljakutsetest argumentidel
 (rida 13) ning binaarsetest tehetest (read 16-20) avaldistel (rida 14).
 Tüüp 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

Id
\end_layout

\end_inset

 on samaväärne sõnega.
\end_layout

\begin_layout Standard
Omistamiste vasakul poolel võib olla (kood 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Simple-pascali-abstraktne-süntak"

\end_inset

): muutuja (rida 23), massiivi element (rida 24) või kirje väli (rida 25).
\end_layout

\begin_layout Standard
Laused on järgnevad (kood 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Simple-pascali-abstraktne-süntak"

\end_inset

): omistamine (rida 28), protseduuri väljakutse argumentidel (rida 29),
 funktsioonist väärtusega tagasipöördumine (rida 30), tsükli katkestamine
 (rida 31) ja jätkamine (rida 32), programmi või protseduuri lõpetamine
 (rida 33), kui-siis-muidu hargnemine (rida 34) ja loendav tsükkel (rida
 35).
\end_layout

\begin_layout Standard

\emph on
Simple-Pascali
\emph default
 programm (kood 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Simple-pascali-abstraktne-süntak"

\end_inset

) koosneb konstantidest (rida 38), tüüpidest (rida 39), globaalsetest muutujates
t (rida 40), funktsioonidest (sh.
 protseduuridest, mis on realiseeritud 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

void
\end_layout

\end_inset

 tüüpi funktsioonidena; rida 41) ja programmi kehast (rida 42), milleks
 on lausete jada.
\end_layout

\begin_layout Standard
Käesolev töö tegeleb protseduuri siseste optimeerimistega.
 Lihtsuse huvides pole siinkohal toodud 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

Function
\end_layout

\end_inset

 tüübi esitust Haskellis.
 Samuti on välja jäetud tüüp 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

Type
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
\noindent
\begin_inset listings
lstparams "basicstyle={\sffamily},breaklines=true,float,language=Haskell,numbers=left"
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:Simple-pascali-abstraktne-süntak"

\end_inset


\emph on
Simple-Pascali 
\emph default
abstraktne süntaksipuu
\end_layout

\end_inset

data Annotate node ann = Annotate
\end_layout

\begin_layout Plain Layout

  { content :: node
\end_layout

\begin_layout Plain Layout

  , annotation :: ann }
\end_layout

\begin_layout Plain Layout

type node :~ ann = Annotate (node ann) ann
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

data Lit = LInteger Integer | LString String | LBool Bool
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

data Expression a =
\end_layout

\begin_layout Plain Layout

    Variable Id
\end_layout

\begin_layout Plain Layout

  | ArrayItem Id (Expression :~ a)
\end_layout

\begin_layout Plain Layout

  | RecordField Id Id
\end_layout

\begin_layout Plain Layout

  | Literal Lit
\end_layout

\begin_layout Plain Layout

  | Call Id [Expression :~ a]
\end_layout

\begin_layout Plain Layout

  | Op BinOp (Expression :~ a) (Expression :~ a)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

data BinOp =
\end_layout

\begin_layout Plain Layout

    Add | Sub
\end_layout

\begin_layout Plain Layout

  | Mul | Div | Mod
\end_layout

\begin_layout Plain Layout

  | Pow
\end_layout

\begin_layout Plain Layout

  | IsGT | IsLT | IsEQ | IsNE
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

data LValue a =
\end_layout

\begin_layout Plain Layout

    LVariable Id
\end_layout

\begin_layout Plain Layout

  | LArray Id (Expression :~ a)
\end_layout

\begin_layout Plain Layout

  | LField Id Id
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

data Statement a =
\end_layout

\begin_layout Plain Layout

    Assign (LValue :~ a) (Expression :~ a)
\end_layout

\begin_layout Plain Layout

  | Procedure Id [Expression :~ a]
\end_layout

\begin_layout Plain Layout

  | Return (Expression :~ a)
\end_layout

\begin_layout Plain Layout

  | Break
\end_layout

\begin_layout Plain Layout

  | Continue
\end_layout

\begin_layout Plain Layout

  | Exit
\end_layout

\begin_layout Plain Layout

  | IfThenElse (Expression :~ a) [Statement :~ a] [Statement :~ a]
\end_layout

\begin_layout Plain Layout

  | For Id (Expression :~ a) (Expression :~ a) [Statement :~ a]
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

data Program a = Program
\end_layout

\begin_layout Plain Layout

  { progConsts :: [(Id, Expression :~ a)]
\end_layout

\begin_layout Plain Layout

  , progTypes :: Map Id Type
\end_layout

\begin_layout Plain Layout

  , progVariables :: [Annotate Symbol a]
\end_layout

\begin_layout Plain Layout

  , progFunctions :: [Function :~ a]
\end_layout

\begin_layout Plain Layout

  , progBody :: [Statement :~ a] }
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Hoopl-teegi nõuded vahe-esitusele
\end_layout

\begin_layout Standard
Hoopl-teek töötleb juhtvoo graafe (ingl.
 control-flow graph), mis koosnevad: a) servadega ühendatud plokkidest (ingl.
 blocks), b) liimitud graafidest (ingl.
 spliced graphs).
 Plokk omakorda koosneb ühest või mitmest järjestikusest sõlmest (ingl.
 node).
 Sõlm kui kõige väiksem juhtvoo üksus vastab madaltaseme keeles käsule (lae,
 salvesta, opereeri, hargne vms) või kõrgtaseme keeles lihtlausele (ingl.
 statement): kui-siis-muidu, omista vms.
 
\begin_inset CommandInset citation
LatexCommand cite
after "lk. 2"
key "hoopl'10"

\end_inset


\end_layout

\begin_layout Standard
Juhtvoo kulgemist sõlme, plokki või graafi sisenemisel ja väljumisel tähistataks
e kujudega avatud (open, 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

O
\end_layout

\end_inset

) ja suletud (closed, 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

C
\end_layout

\end_inset

):
\end_layout

\begin_layout Itemize
sisenemisel (ingl.
 entry): avatud --- leidub unikaalne eelkäija; suletud --- eelkäijaid on
 null või rohkem,
\end_layout

\begin_layout Itemize
väljumisel (ingl.
 exit): avatud --- leidub unikaalne järeltulija; suletud --- järeltulijaid
 on null või rohkem,
\end_layout

\begin_layout Standard
seejuures eelkäija on koht, kust juhtvoog lähtub, ning järeltulija koht,
 kuhu juhtvoog suubub.
 
\begin_inset CommandInset citation
LatexCommand cite
after "lk. 2-3"
key "hoopl'10"

\end_inset


\end_layout

\begin_layout Standard
Plokki sisenemise kuju on määratud ploki esimese sõlme sisenemise kujuga
 ja väljumise kuju on määratud ploki viimase sõlme väljumise kujuga.
 Ploki sisene juhtvoo kulg peab järgima sõlmede järjestust ja kujusid, st
 ploki siseselt ei saa olla väljumisel suletud sõlme, millele järgneb veel
 mõni sõlm, ega sisenemisel suletud sõlme, millele eelneb mõni sõlm.
 Kahte plokki saab avatud otsest siduda üheks terviklikuks plokiks.
 
\begin_inset CommandInset citation
LatexCommand cite
after "lk. 3"
key "hoopl'10"

\end_inset


\end_layout

\begin_layout Standard
Graaf sisaldab otstest suletud plokkide kogumit.
 Juhtvoo kulg ploki sees on ilmne, kuid plokkide vaheline kulg on määratud
 graafi servadega.
 Tüübiklass 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

NonLocal
\end_layout

\end_inset

 seab vastavusse sisenemisel suletud sõlme ja tema unikaalse märgendi (ingl.
 label); väljumisel suletud sõlme ja vahetult järeltulevate sõlmede märgendite
 hulga, kuhu võib juhtvoog edasi kanduda.
 Sellega määrakse graafi servad.
 
\begin_inset CommandInset citation
LatexCommand cite
after "lk. 4"
key "hoopl'10"

\end_inset


\end_layout

\begin_layout Standard
Graaf võib täiendavalt omada sisenemispunkti, sisenemisel avatud plokki,
 ning väljumispunkti, väljumisel avatud plokki, mis muudavad vastavalt graafi
 sisenemise ja väljumise kujusid.
 Kahte graafi saab avatud otsest siduda (operaator 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

<*>
\end_layout

\end_inset

) üheks terviklikuks graafiks sarnaselt plokkidega nii, et juhtvoog kandub
 väljumisel avatud graafist edasi sisenemisel avatud graafi.
 Lisaks saab graafe suletud otsest liimida (operaator 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

|*><*|
\end_layout

\end_inset

) suuremaks graafiks, kuid selline liimimine ei mõjuta juhtvoo kulgu.
 
\begin_inset CommandInset citation
LatexCommand cite
after "lk. 4"
key "hoopl'10"

\end_inset


\end_layout

\begin_layout Standard
Hoopl-teek pakub teegi kasutajale graafi ja ploki tüübid, mis on polümorfsed
 sõlme tüübi suhtes, ja nendega seonduvad funktsioonid.
 Sõlme tüübi realiseerimine on kasutaja ülesanne, kusjuures tuleb täita
 teegi poolt seatud nõuded:
\end_layout

\begin_layout Itemize
sõlme sisenemise ja väljumise kujud peavad olema määratud,
\end_layout

\begin_layout Itemize
sõlme tüüp peab kuuluma tüübiklassi 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

NonLocal
\end_layout

\end_inset

.
\end_layout

\begin_layout Subsection
Vahe-esituse kirjeldus
\end_layout

\begin_layout Standard
Järgnevalt otsitakse ASTi konstruktsioonidele vasted, mis rahuldavad Hoopl-teegi
 nõudeid vahe-esitusele.
\end_layout

\begin_layout Standard
Kuna avaldise AST võib sisaldada funktsioonide väljakutseid, mis kannavad
 juhtvoo üle väljakutsutava funktsiooni kehale, millest tagasipöördumisel
 jätkatakse avaldise arvutamist pooleli jäänud kohast, siis avaldist sisaldava
 lause AST ei saa olla sõlm --- tagasipöördumise ehk sisenemise kohti tekiks
 mitu ja sõlm ei saaks omada unikaalset märgendit.
 Samuti ei saa funktsioonide väljakutseid teha avaldise arvutamisest väljaspool,
 kuna funktsioonidel võivad olla kõrvalmõjud (globaalsete muutujate muutmine,
 vms), mis muudaksid avaldise lõpptulemust.
 Seega peab iga funktsiooni väljakutse asuma eraldi sõlmes.
\end_layout

\begin_layout Standard
Koodis 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Vahekeele-abstraktne-süntaksipuu"

\end_inset

 on toodud lihtsustatud avaldise IR-i tüüp (read 1-6), mis võimaldab tervikliku
 avaldise ASTi jaotada mitmesse vahe-esituse sõlme.
 Avaldise AST läbitakse arvutamise järjekorras ning iga puu sõlme väärtus
 omistatakse abimuutujale 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

TempVar
\end_layout

\end_inset

.
 Funktsiooni väljakutse käsitlus on toodud edasises, kuid väljakutse lõpptulemus
e väärtus omistatakse samuti 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

TempVar
\end_layout

\end_inset

-ile, mis võimaldab seda kasutada avaldise vahe-esituse osana.
 Literaalid (
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

Lit
\end_layout

\end_inset

), binaarsed tehted (
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

BinOp
\end_layout

\end_inset

) ja tüüp 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

Id
\end_layout

\end_inset

 on võetud muutusteta 
\emph on
Simple-Pascalist
\emph default
.
 Loobutud on annotatsioonidest.
\end_layout

\begin_layout Standard
Kuna omistamislause vasaku poole AST sisaldab omakorda avaldist masiivi
 elemendi omistamisel, siis vahe-esituses tuleb see avaldis jaotada osadeks
 ning omistamislause vasakul poole IR-is viidata avaldisele vastavale abimuutuja
le (kood 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Vahekeele-abstraktne-süntaksipuu"

\end_inset

, rida 10).
 Muutuja ja kirje välja kasutamine omistamislause vasakul poole IR-is on
 sarnane omistamislause ASTiga (kood 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Vahekeele-abstraktne-süntaksipuu"

\end_inset

, read 9 ja 11).
\end_layout

\begin_layout Standard
Koodis 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Vahekeele-abstraktne-süntaksipuu"

\end_inset

 on toodud vahe-esituse lausele vastav sõlme tüüp, kus parameetrid 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

e
\end_layout

\end_inset

 ja 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

x
\end_layout

\end_inset

 näitavad vastavalt sõlme sisenemise ja väljumise kuju.
 Ainuke sisenemisel suletud sõlm on unikaalse märgendiga varustatud 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

SLabel
\end_layout

\end_inset

 (rida 14).
 Otstest avatud sõlm 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

STempAssign
\end_layout

\end_inset

 arvutab avaldise IR-i 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

SExpression
\end_layout

\end_inset

 väärtuse ja omistab selle abimuutujale 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

TempVar
\end_layout

\end_inset

 (rida 15).
 Sõlm 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

SLValAssign
\end_layout

\end_inset

 omistab vasakule poolele 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

LVal
\end_layout

\end_inset

 abimuutujale 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

TempVar
\end_layout

\end_inset

 vastava väärtuse (rida 16).
 Laused 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

Break
\end_layout

\end_inset

 ja 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

Continue
\end_layout

\end_inset

 on vahe-esituses asendatud hüppega konkreetsele märgendile --- 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

SGoto
\end_layout

\end_inset

 (rida 18).
 Kui-siis-muidu lause 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

SIfThenElse
\end_layout

\end_inset

 kannab juhtvoo vastavalt 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

TempVar
\end_layout

\end_inset

-iga tähistatud väärtusele üle kas esimesele (väärtus on tõene) või teisele
 (väär) märgendile (rida 19).
 Protseduuri väljakutse 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

SProcedure
\end_layout

\end_inset

 edastab 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

Id
\end_layout

\end_inset

-ga tähistatud protseduuri kehale argumentide väärtustele vastavad abimuutujad
 ning pärast keha täitmist naaseb juhtvoog määratud märgendile (rida 20).
 
\emph on
Simple-Pascal
\emph default
 ei toeta protseduuride / funktsioonide väljundparameetreid.
 Funktsiooni väljakutse on analoogne protseduuri väljakutsele, kuid tagastatav
 väärtus omistatakse 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

TempVar
\end_layout

\end_inset

-ile (rida 21).
 Funktsioonist väärtusega tagasipöördumise lause 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

Return
\end_layout

\end_inset

 on lihtsuse huvides välja jäetud.
 Programmi keha (või ka protseduuri keha) lõppeb sõlmega 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

SExit
\end_layout

\end_inset

 (rida 17), mis lõpetab programmi (protseduuri) täitmise.
\end_layout

\begin_layout Standard
Eelnevalt toodud andmekonstruktorid määravad sõlme sisenemise ja väljumise
 kujud.
 Koodis 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Vahekeele-abstraktne-süntaksipuu"

\end_inset

 ridadel 23-29 on sõlme tüüp 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

Stmnt
\end_layout

\end_inset

 tehtud tüübiklassi 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

NonLocal
\end_layout

\end_inset

 eksemplariks: pannakse vastavusse sisenemisel suletud sõlmede märgendid
 (defineerides sõlme 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

entryLabel
\end_layout

\end_inset

) ja väljumisel suletud sõlmedele vahetult järgnevate sõlmede märgendite
 hulga (defineerides sõlme 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

successors
\end_layout

\end_inset

).
 Sellega rahuldab vahe-esituse sõlme tüüp Hoopl-teegi poolt esitatud nõudeid.
\end_layout

\begin_layout Standard
Lisaks on sõlme tüüp 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

Stmnt
\end_layout

\end_inset

 tehtud tüübiklassi 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

HooplNode
\end_layout

\end_inset

 eksemplariks (kood 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Vahekeele-abstraktne-süntaksipuu"

\end_inset

, read 31-33).
 Selleks on näidatud, millist sõlme konstruktorit (
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

mkLabelNode
\end_layout

\end_inset

) peab funktsioon 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

mkLabel
\end_layout

\end_inset

 kasutama, et märgendist saaks teha sisenemisel suletud graafi, mis koosneb
 sellest sõlmest; millist konstruktorit (
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

mkBranchNode
\end_layout

\end_inset

) peab funktsioon 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

mkBranch
\end_layout

\end_inset

 kasutama, et märgendist teha väljumisel suletud graaf, mis koosneb vastavast
 sõlmest.
 Funktsioonid 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

mkLabel
\end_layout

\end_inset

 ja 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

mkBranch
\end_layout

\end_inset

 hõlbustavad transleerimisel graafide koostamist.
\end_layout

\begin_layout Standard
Programm vahe-esituses (kood 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Vahekeele-abstraktne-süntaksipuu"

\end_inset

) koosneb algusmärgendist (rida 35), mis vastab juhtvoo esimesele sõlmele,
 ning otstest suletud juhtvoo graafist (rida 39), milles sõlmeks on eespool
 kirjeldatud sõlme tüüp 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

Stmnt
\end_layout

\end_inset

.
 Väli 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

progVars
\end_layout

\end_inset

 sisaldab globaalmuutujaid kodeeritud omistamislause vasakpoole jadana (rida
 37).
 Väli 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

tempVars
\end_layout

\end_inset

 sisaldab kasutatud abimuutujaid (rida 38).
 Programmi konstantide, tüüpide ja funktsioonide / protseduuride definitsioonide
 AST ei leia edasistes protseduurisisestes andmevooanalüüsides kasutust
 ja seega pole neid vahe-esitusse üle kantud.
\end_layout

\begin_layout Standard
\noindent
\begin_inset listings
lstparams "basicstyle={\sffamily},breaklines=true,float,language=Haskell,numbers=left"
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:Vahekeele-abstraktne-süntaksipuu"

\end_inset

Vahe-esituse abstraktne süntaksipuu
\end_layout

\end_inset

data SExpression =
\end_layout

\begin_layout Plain Layout

    SVariable Id
\end_layout

\begin_layout Plain Layout

  | SArrayItem Id TempVar
\end_layout

\begin_layout Plain Layout

  | SRecordField Id Id
\end_layout

\begin_layout Plain Layout

  | SLiteral Lit
\end_layout

\begin_layout Plain Layout

  | SOp BinOp TempVar TempVar
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\noindent

data LVal =
\end_layout

\begin_layout Plain Layout
\noindent

    LVar Id
\end_layout

\begin_layout Plain Layout
\noindent

  | LArr Id TempVar
\end_layout

\begin_layout Plain Layout
\noindent

  | LFld Id Id
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\noindent

data Stmnt e x where
\end_layout

\begin_layout Plain Layout
\noindent

  SLabel :: Label -> Stmnt C O
\end_layout

\begin_layout Plain Layout
\noindent

  STempAssign :: TempVar -> SExpression -> Stmnt O O
\end_layout

\begin_layout Plain Layout
\noindent

  SLValAssign :: LVal -> TempVar -> Stmnt O O
\end_layout

\begin_layout Plain Layout
\noindent

  SExit :: Stmnt O C
\end_layout

\begin_layout Plain Layout
\noindent

  SGoto :: Label -> Stmnt O C
\end_layout

\begin_layout Plain Layout
\noindent

  SIfThenElse :: TempVar -> Label -> Label -> Stmnt O C
\end_layout

\begin_layout Plain Layout
\noindent

  SProcedure :: Id -> [TempVar] -> Label -> Stmnt O C
\end_layout

\begin_layout Plain Layout
\noindent

  SFun :: TempVar -> Id -> [TempVar] -> Label -> Stmnt O C
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\noindent

instance NonLocal Stmnt where
\end_layout

\begin_layout Plain Layout
\noindent

  entryLabel (SLabel l) = l
\end_layout

\begin_layout Plain Layout
\noindent

  successors SExit = []
\end_layout

\begin_layout Plain Layout
\noindent

  successors (SGoto l) = [l]
\end_layout

\begin_layout Plain Layout
\noindent

  successors (SIfThenElse _ t f) = [t, f]
\end_layout

\begin_layout Plain Layout
\noindent

  successors (SProcedure _ _ l) = [l]
\end_layout

\begin_layout Plain Layout
\noindent

  successors (SFun _ _ _ l) = [l]
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\noindent

instance HooplNode Stmnt where
\end_layout

\begin_layout Plain Layout
\noindent

  mkBranchNode = SGoto
\end_layout

\begin_layout Plain Layout
\noindent

  mkLabelNode = SLabel
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\noindent

data IProgram = IProgram
\end_layout

\begin_layout Plain Layout
\noindent

  { entry :: Label
\end_layout

\begin_layout Plain Layout
\noindent

  , progVars :: [LVal]
\end_layout

\begin_layout Plain Layout
\noindent

  , tempVars :: [TempVar]
\end_layout

\begin_layout Plain Layout
\noindent

  , body :: Graph Stmnt C C}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Märgendite ja abimuutujate genereerimine
\end_layout

\begin_layout Standard
Märgendite tüüp 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

Label
\end_layout

\end_inset

 on kirjeldatud teegis Hoopl.
 Seda tüüpi väärtusi on võimalik genereerida unikaalsust tagavas monaadis
 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

SimpleUniqueMonad
\end_layout

\end_inset

 funktsiooniga 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

freshLabel
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
Avaldiste ASTide eri sõlmedes arvutatud väärtused on üldjuhul erinevad ja
 seega peab neile üldjuhul vastama ka erinevad abimuutujad.
 Sarnaselt märgenditega peab olema võimalus genereerida unikaalseid abimuutujaid.
 Hoopl-teegi liides ei ekspordi kõike unikaalsusmonaadiga seonduvat ja seega
 ei saa neid taaskasutada 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

TempVar
\end_layout

\end_inset

-i realiseerimiseks.
 Haskelli viki 
\begin_inset CommandInset citation
LatexCommand cite
key "unique'13"

\end_inset

 pakub olekumonaadil põhineva unikaalsusmonaaditeisendaja 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

UniqueT
\end_layout

\end_inset

, milles funktsioon 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

fresh
\end_layout

\end_inset

 tagastab unikaalse täisarvu.
 Teisendajale on lisatud funktsioon 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

used
\end_layout

\end_inset

, mis tagastab nimekirja seni kasutatud täisarvudest.
\end_layout

\begin_layout Standard
Väljumisel suletud sõlmede konstrueerimiseks vajalikud märgendid on võimalik
 genereerida vahetult lause ASTi transleerides, välja arvatud 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

Break
\end_layout

\end_inset

 ja 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

Continue
\end_layout

\end_inset

 lause puhul - nende märgendid genereeritakse tsükli lause juures.
 Seega tuleb neid märgendeid pidada meeles, kuni jõutakse tsüklilause transleeri
misest tsüklile vastava 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

Break
\end_layout

\end_inset

 või 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

Continue
\end_layout

\end_inset

 lauseni.
 Selleks sobib kasutada keskkonnamonaadi teisendajat, kus keskkonna tüübiks
 on 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

Map String Label
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
Kuna transleerimisel on vajalik unikaalsete märgendite ja abimuutujate genereeri
mine ning 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

Break
\end_layout

\end_inset

/
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

Continue
\end_layout

\end_inset

 märgendite meeles pidamine, siis transleerimine peab toimuma monaadis,
 mis need omadused ühendab.
 Koodis 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Transleerimismonaad"

\end_inset

 on toodud 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

TranslationMonad
\end_layout

\end_inset

, mis kombineerib märgendite genereerimiseks 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

SimpleUniqueMonad
\end_layout

\end_inset

-i, abimuutujate genereerimiseks teisendaja 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

UniqueT
\end_layout

\end_inset

 ja märgendite hoidmiseks 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

ReaderT
\end_layout

\end_inset

 teisendaja (read 1-4).
 Funktsioon 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

freshT
\end_layout

\end_inset

 tagastab uue abimuutuja (read 6-7), 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

usedTs
\end_layout

\end_inset

 tagastab juba kasutatud abimuutujad (read 9-10), funktsioon 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

freshL
\end_layout

\end_inset

 uue märgendi (read 12-13) ja funktsioon 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

getL
\end_layout

\end_inset

 tagastab keskkonnast sõne argumendile vastava märgendi (read 15-16), eeldusel,
 et vaste leidub.
 Funktsioon 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

localL
\end_layout

\end_inset

 muudab keskkonda (read 18-21), lisades sinna jada sõne-märgendi vaste paare.
\end_layout

\begin_layout Standard
Eelnevalt kasutatud funktsioon 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

mapUniqueT
\end_layout

\end_inset

 on täiendus 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

UniqueT
\end_layout

\end_inset

 teisendajale (kood 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Transleerimismonaad"

\end_inset

, read 23-27), et saaks rakendada funktsiooni monaadilisele väärtusele jättes
 seejuures teisendaja sisese monaadi puutumata.
 Koodis 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Transleerimismonaad"

\end_inset

 toodud realisatsioon üldjuhul seda eesmärki ei täida, kuna sisemist monaadi
 seotakse (ingl.
 bind ehk 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

>>=
\end_layout

\end_inset

 ja 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

<-
\end_layout

\end_inset

) kaks korda ja seega on monaadi kõrvalmõjudega muudetud.
 Erijuhul, kus sisemiseks monaadiks on 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

ReaderT e SimpleUniqueMonad
\end_layout

\end_inset

, tähendab see, et raisatakse mõned unikaalsed märgendid.
 Selline kaotus ei sega transleerimist ega hilisemat analüüsimist.
\end_layout

\begin_layout Standard
\noindent
\begin_inset listings
lstparams "basicstyle={\sffamily},breaklines=true,float,language=Haskell,numbers=left"
inline false
status open

\begin_layout Plain Layout
\noindent

\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:Transleerimismonaad"

\end_inset

Transleerimismonaad
\end_layout

\end_inset

type TranslationMonad =
\end_layout

\begin_layout Plain Layout
\noindent

  UniqueT (ReaderT (Map String Label) SimpleUniqueMonad)
\end_layout

\begin_layout Plain Layout
\noindent

runTranslationMonad =
\end_layout

\begin_layout Plain Layout
\noindent

  runSimpleUniqueMonad .
 (flip runReaderT Map.empty) .
 evalUniqueT
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\noindent

freshT :: TranslationMonad TempVar
\end_layout

\begin_layout Plain Layout
\noindent

freshT = fresh
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\noindent

usedTs :: TranslationMonad [TempVar]
\end_layout

\begin_layout Plain Layout
\noindent

usedTs = used
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\noindent

freshL :: TranslationMonad Label
\end_layout

\begin_layout Plain Layout
\noindent

freshL = lift $ lift freshLabel
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\noindent

getL :: String -> TranslationMonad Label
\end_layout

\begin_layout Plain Layout
\noindent

getL k = lift $ asks (fromJust .
 Map.lookup k)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\noindent

localL :: [(String, Label)] ->
\end_layout

\begin_layout Plain Layout
\noindent

            TranslationMonad a -> TranslationMonad a
\end_layout

\begin_layout Plain Layout
\noindent

localL ls = mapUniqueT (local 
\end_layout

\begin_layout Plain Layout
\noindent

  (
\backslash
e -> foldl (
\backslash
r (s, l) -> Map.insert s l r) e ls))
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\noindent

mapUniqueT :: (Monad m) => (m a -> m b) -> UniqueT m a -> UniqueT m b
\end_layout

\begin_layout Plain Layout
\noindent

mapUniqueT f (UniqueT m) = UniqueT $ mapStateT
\end_layout

\begin_layout Plain Layout
\noindent

  (
\backslash
m -> do (_, s) <- m
\end_layout

\begin_layout Plain Layout
\noindent

            b <- f $ m >>= return .
 fst
\end_layout

\begin_layout Plain Layout
\noindent

            return (b, s)) m
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
ASTide tõlkimine vahe-esitusse
\end_layout

\begin_layout Subsubsection
Avaldiste transleerimine
\end_layout

\begin_layout Standard
Järgnevalt on näidatud avaldise ASTi transleerimine abimuutuja ja otstest
 avatud graafi paariks (kood 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Avaldiste-transleerimine"

\end_inset

, rida 1).
 Graafi sõlmedes arvutatakse avaldise väärtuse ja omistatakse see vastavale
 abimuutujale.
 Kui avaldise annoteeritud ASTi sisuks on literaal 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

l
\end_layout

\end_inset

 (rida 3), siis funktsiooniga 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

freshT
\end_layout

\end_inset

 genereeritakse abimuutuja 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

t
\end_layout

\end_inset

 (rida 4).
 Funktsiooniga 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

mkMiddle
\end_layout

\end_inset

 muudetakse otstest avatud sõlm otstest avatud graafiks (read 5, 9, 13,
 18, 24).
 Sõlm 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

STempAssign
\end_layout

\end_inset

 omistab abimuutujale 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

t
\end_layout

\end_inset

 IR-avaldise 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

SLiteral l 
\end_layout

\end_inset

väärtuse (rida 5).
 Sarnaselt käitutakse, kui avaldise ASTis on muutuja 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

v
\end_layout

\end_inset

 (rida 7): abimuutujale omistatakse avaldise IR-i 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

SVariable v
\end_layout

\end_inset

 väärtus (rida 9); või kui avaldise ASTis on kirje 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

r
\end_layout

\end_inset

 väli 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

f
\end_layout

\end_inset

 (rida 11): abimuutujale omistatakse avaldise IR-i 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

SRecordField r f
\end_layout

\end_inset

 väärtus (rida 13).
\end_layout

\begin_layout Standard
Kui avaldise ASTis on massiivi 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

a
\end_layout

\end_inset

 elemendi, mille indeks on määratud avaldisega 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

e
\end_layout

\end_inset

, väärtus (rida 15), siis kõige pealt tuleb funktsiooniga 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

e2g
\end_layout

\end_inset

 transleerida avaldis 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

e
\end_layout

\end_inset

, millele vastab abimuutuja 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

u
\end_layout

\end_inset

 ja graaf 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

e'
\end_layout

\end_inset

 (rida 16).
 Genereeritakse kogu avaldisele vastav abimuutuja 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

t
\end_layout

\end_inset

 ja koostatakse graaf 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

g
\end_layout

\end_inset

, mille sõlmeks on abimuutujale 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

t
\end_layout

\end_inset

 avaldise IR-i 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

SArrayItem a u
\end_layout

\end_inset

 väärtuse omistamine (rida 18).
 Kogu avaldisele vastav graaf saadakse graafide 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

e’
\end_layout

\end_inset

 ja 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

g
\end_layout

\end_inset

 sidumisel avatud otstest (rida 19).
\end_layout

\begin_layout Standard
Kui avaldise ASTis on binaarne operatsioon 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

o
\end_layout

\end_inset

 rakendatud avaldistele 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

el
\end_layout

\end_inset

 ja 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

er
\end_layout

\end_inset

 (rida 20), siis transleeritakse need avaldised abimuutuja-graafi paarideks:
 vastavalt 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

(tl, gl)
\end_layout

\end_inset

 ja 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

(tr, gr)
\end_layout

\end_inset

 (read 21-22).
 Genereeritakse kogu avaldisele vastava abimuutuja 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

t
\end_layout

\end_inset

 (rida 23).
 Koostatakse graaf 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

g
\end_layout

\end_inset

, mille sõlmes omistatakse abimuutujale 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

t
\end_layout

\end_inset

 vastav avaldise IR-i arvutus 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

SOp o tl tr
\end_layout

\end_inset

, mis teostab abimuutujatele 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

tl
\end_layout

\end_inset

 ja 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

tr
\end_layout

\end_inset

 vastavate väärtustega tehte 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

o
\end_layout

\end_inset

 (rida 24).
 Kogu avaldisele vastav graaf saadakse graafide 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

gl
\end_layout

\end_inset

, 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

gr
\end_layout

\end_inset

 ja 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

g
\end_layout

\end_inset

 sidumisel avatud otstest (rida 25).
\end_layout

\begin_layout Standard
Kui avaldise ASTis on funktsiooni 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

f
\end_layout

\end_inset

 väljakutse argumentide jadaga 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

es
\end_layout

\end_inset

 (rida 26), siis tuleb transleerida argumentidele vastavad avaldised (rida
 27).
 Argumentide avaldistele vastavad abimuutujate jada on muutuja 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

ts
\end_layout

\end_inset

 ja graafide jada on muutuja 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

es'
\end_layout

\end_inset

, mis seotakse 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

catGraphs
\end_layout

\end_inset

 funktsiooniga terviklikuks otstest avatud graafiks 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

es''
\end_layout

\end_inset

 (rida 30).
 Genereeritakse märgend 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

l
\end_layout

\end_inset

 (rida 28), kuhu juhtvoog naaseb peale funktsiooni väljakutset.
 Märgendist 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

l
\end_layout

\end_inset

 tehakse 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

mkLabel
\end_layout

\end_inset

 funktsiooniga graaf 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

r
\end_layout

\end_inset

 (rida 32), mis on sisenemisel suletud.
 Funktsiooni väärtusele vastab genereeritud abimuutuja 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

t
\end_layout

\end_inset

 (rida 29).
 Funktsiooni väärtus arvutatakse sõlmes 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

SFun t f ts l
\end_layout

\end_inset

, mis 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

mkLast
\end_layout

\end_inset

 funktsiooniga tehakse sisenemisel avatud ja väljumisel suletud graafiks
 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

g
\end_layout

\end_inset

 (rida 31).
 Argumentidele vastav graaf 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

es''
\end_layout

\end_inset

 ja funktsiooni väljakutsele vastav graaf 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

g
\end_layout

\end_inset

 seotakse operaatoriga 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

<*>
\end_layout

\end_inset

 ja saadud väljumisel suletud graaf seotakse sisenemisel suletud graafiga
 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

r
\end_layout

\end_inset

, kasutades operaatorit 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

|*><*|
\end_layout

\end_inset

 (rida 33).
\end_layout

\begin_layout Standard
\noindent
\begin_inset listings
lstparams "basicstyle={\sffamily},float,language=Haskell,numbers=left"
inline false
status open

\begin_layout Plain Layout
\noindent

\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:Avaldiste-transleerimine"

\end_inset

Avaldiste transleerimine
\end_layout

\end_inset

e2g :: (Expression :~ a) ->
\end_layout

\begin_layout Plain Layout
\noindent

         TranslationMonad (TempVar, Graph Stmnt O O)
\end_layout

\begin_layout Plain Layout
\noindent

e2g (content -> Literal l) =
\end_layout

\begin_layout Plain Layout
\noindent

  do t <- freshT
\end_layout

\begin_layout Plain Layout
\noindent

     let g = mkMiddle $ STempAssign t (SLiteral l)
\end_layout

\begin_layout Plain Layout
\noindent

     return (t, g)
\end_layout

\begin_layout Plain Layout
\noindent

e2g (content -> Variable v) =
\end_layout

\begin_layout Plain Layout
\noindent

  do t <- freshT
\end_layout

\begin_layout Plain Layout
\noindent

     let g = mkMiddle $ STempAssign t (SVariable v)
\end_layout

\begin_layout Plain Layout
\noindent

     return (t, g)
\end_layout

\begin_layout Plain Layout
\noindent

e2g (content -> RecordField r f) =
\end_layout

\begin_layout Plain Layout
\noindent

  do t <- freshT
\end_layout

\begin_layout Plain Layout
\noindent

     let g = mkMiddle $ STempAssign t $ SRecordField r f
\end_layout

\begin_layout Plain Layout
\noindent

     return (t, g)
\end_layout

\begin_layout Plain Layout
\noindent

e2g (content -> ArrayItem a e) =
\end_layout

\begin_layout Plain Layout
\noindent

  do (u, e') <- e2g e
\end_layout

\begin_layout Plain Layout
\noindent

     t <- freshT
\end_layout

\begin_layout Plain Layout
\noindent

     let g = mkMiddle $ STempAssign t $ SArrayItem a u
\end_layout

\begin_layout Plain Layout
\noindent

     return (t, e' <*> g)
\end_layout

\begin_layout Plain Layout
\noindent

e2g (content -> Op o el er) =
\end_layout

\begin_layout Plain Layout
\noindent

  do (tl, gl) <- e2g el
\end_layout

\begin_layout Plain Layout
\noindent

     (tr, gr) <- e2g er
\end_layout

\begin_layout Plain Layout
\noindent

     t <- freshT
\end_layout

\begin_layout Plain Layout
\noindent

     let g = mkMiddle $ STempAssign t $ SOp o tl tr
\end_layout

\begin_layout Plain Layout
\noindent

     return (t, gl <*> gr <*> g)
\end_layout

\begin_layout Plain Layout
\noindent

e2g (content -> Call f es) =
\end_layout

\begin_layout Plain Layout
\noindent

  do (ts, es') <- mapAndUnzipM e2g es
\end_layout

\begin_layout Plain Layout
\noindent

     l <- freshL
\end_layout

\begin_layout Plain Layout
\noindent

     t <- freshT
\end_layout

\begin_layout Plain Layout
\noindent

     let es'' = catGraphs es'
\end_layout

\begin_layout Plain Layout
\noindent

         g = mkLast $ SFun t f ts l
\end_layout

\begin_layout Plain Layout
\noindent

         r = mkLabel l -- where to return after call
\end_layout

\begin_layout Plain Layout
\noindent

     return (t, es'' <*> g |*><*| r)
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Lausete transleerimine
\end_layout

\begin_layout Standard
Koodis 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Lausete-transleerimine"

\end_inset

 on näidatud lause ASTi transleerimine otstest avatud graafiks (rida 1),
 mille sõlmed on IR-i laused.
 Kui annoteeritud lause sisuks on vasakule poolele 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

lval
\end_layout

\end_inset

 avaldise 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

exp
\end_layout

\end_inset

 omistamine (rida 2), siis tuleb avaldis transleerida funktsiooniga 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

e2g
\end_layout

\end_inset

 (rida 3): väärtusele vastab abimuutuja 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

t
\end_layout

\end_inset

 ja graaf 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

eg
\end_layout

\end_inset

.
 Vasaku poole ASTile seatakse vastavusse vahe-esituse vasak pool 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

lv
\end_layout

\end_inset

 ja sellega seotud graaf 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

lg
\end_layout

\end_inset

 (rida 4).
 Kui vasakul poolel on muutuja 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

v
\end_layout

\end_inset

 või kirje 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

r
\end_layout

\end_inset

 väli 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

f
\end_layout

\end_inset

 (read4-5), siis seotud graaf 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

lg
\end_layout

\end_inset

 on tühigraaf ning vasteks 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

lv
\end_layout

\end_inset

 on vastavalt 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

LVar v
\end_layout

\end_inset

 või 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

LFld r f
\end_layout

\end_inset

.
 Kui vasakul poolel on massiivi 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

a
\end_layout

\end_inset

 element (rida 7), mille indeks on määratud avaldisega 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

e
\end_layout

\end_inset

, siis tuleb avaldis transleerida abimuutujaks 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

t
\end_layout

\end_inset

 ja graafiks 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

g
\end_layout

\end_inset

, mis on ühtlasi vasaku poolega seotud graafiks 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

lg
\end_layout

\end_inset

.
 Vasaku poole vasteks on IR-i vasak pool 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

LArr a t
\end_layout

\end_inset

 (rida 8).
 Graaf 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

ag
\end_layout

\end_inset

 on funktsiooniga 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

mkMiddle
\end_layout

\end_inset

 koostatud sõlmest 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

SLValAssign lv t
\end_layout

\end_inset

 (rida 9).
 Kogu omistamislausele vastab graaf, mis saadakse graafide 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

eg
\end_layout

\end_inset

, 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

lg
\end_layout

\end_inset

 ja 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

ag
\end_layout

\end_inset

 tervikuks sidumisest (rida 10).
\end_layout

\begin_layout Standard
Kui lause ASTis on protseduuri 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

p
\end_layout

\end_inset

 väljakutse argumentide jadaga 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

es
\end_layout

\end_inset

 (kood 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Lausete-transleerimine"

\end_inset

, rida 11), siis lause transleerimine on analoogne funktsiooni väljakutse
 transleerimisega avaldiste juures (kood 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Avaldiste-transleerimine"

\end_inset

, rida 25) --- ainult abimuutujat ei genereerita, kuna protseduuri väljakutse
 ei tagasta väärtust.
\end_layout

\begin_layout Standard
\noindent
\begin_inset listings
lstparams "basicstyle={\sffamily},float,language=Haskell,numbers=left"
inline false
status open

\begin_layout Plain Layout
\noindent

\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:Lausete-transleerimine"

\end_inset

Lausete transleerimine
\end_layout

\end_inset

s2g :: Statement :~ a -> TranslationMonad (Graph Stmnt O O)
\end_layout

\begin_layout Plain Layout
\noindent

s2g (content -> Assign lval exp) =
\end_layout

\begin_layout Plain Layout
\noindent

  do (t, eg) <- e2g exp
\end_layout

\begin_layout Plain Layout
\noindent

     (lv, lg) <- case content lval of
\end_layout

\begin_layout Plain Layout
\noindent

                   LVariable v -> return (LVar v, emptyGraph)
\end_layout

\begin_layout Plain Layout
\noindent

                   LField r f -> return (LFld r f, emptyGraph)
\end_layout

\begin_layout Plain Layout
\noindent

                   LArray a e -> do (t, g) <- e2g e
\end_layout

\begin_layout Plain Layout
\noindent

                                    return (LArr a t, g)
\end_layout

\begin_layout Plain Layout
\noindent

     let ag = mkMiddle $ SLValAssign lv t
\end_layout

\begin_layout Plain Layout
\noindent

     return $ eg <*> lg <*> ag
\end_layout

\begin_layout Plain Layout
\noindent

s2g (content -> Procedure p es) =
\end_layout

\begin_layout Plain Layout
\noindent

do (ts, es') <- mapAndUnzipM e2g es
\end_layout

\begin_layout Plain Layout
\noindent

   l <- freshL
\end_layout

\begin_layout Plain Layout
\noindent

   let es'' = catGraphs es'
\end_layout

\begin_layout Plain Layout
\noindent

       g = mkLast $ SProcedure p ts l
\end_layout

\begin_layout Plain Layout
\noindent

       r = mkLabel l -- where to return after call
\end_layout

\begin_layout Plain Layout
\noindent

   return $ es'' <*> g |*><*| r
\end_layout

\begin_layout Plain Layout
\noindent

s2g (content -> IfThenElse e ts fs) =
\end_layout

\begin_layout Plain Layout
\noindent

  do endif <- freshL
\end_layout

\begin_layout Plain Layout
\noindent

     ltrue <- freshL
\end_layout

\begin_layout Plain Layout
\noindent

     lfalse <- freshL
\end_layout

\begin_layout Plain Layout
\noindent

     (t, g) <- e2g e
\end_layout

\begin_layout Plain Layout
\noindent

     tbranch <- ss2g ts
\end_layout

\begin_layout Plain Layout
\noindent

     fbranch <- ss2g fs
\end_layout

\begin_layout Plain Layout
\noindent

     return $
\end_layout

\begin_layout Plain Layout
\noindent

       g <*> mkLast (SIfThenElse t ltrue lfalse) |*><*|
\end_layout

\begin_layout Plain Layout
\noindent

       mkLabel ltrue <*> tbranch <*> mkBranch endif |*><*|
\end_layout

\begin_layout Plain Layout
\noindent

       mkLabel lfalse <*> fbranch <*> mkBranch endif |*><*|
\end_layout

\begin_layout Plain Layout
\noindent

       mkLabel endif
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\noindent

s2g (content -> Continue) =
\end_layout

\begin_layout Plain Layout
\noindent

  do lsur <- freshL
\end_layout

\begin_layout Plain Layout
\noindent

     lcon <- getL "continue"
\end_layout

\begin_layout Plain Layout
\noindent

     return $
\end_layout

\begin_layout Plain Layout
\noindent

       mkBranch lcon |*><*|
\end_layout

\begin_layout Plain Layout
\noindent

       mkLabel lsur
\end_layout

\begin_layout Plain Layout
\noindent

s2g (content -> Break) =
\end_layout

\begin_layout Plain Layout
\noindent

  do lsur <- freshL
\end_layout

\begin_layout Plain Layout
\noindent

     lbrk <- getL "break"
\end_layout

\begin_layout Plain Layout
\noindent

     return $
\end_layout

\begin_layout Plain Layout
\noindent

       mkBranch lbrk |*><*|
\end_layout

\begin_layout Plain Layout
\noindent

       mkLabel lsur
\end_layout

\begin_layout Plain Layout
\noindent

s2g (content -> Exit) =
\end_layout

\begin_layout Plain Layout
\noindent

  do lsur <- freshL
\end_layout

\begin_layout Plain Layout
\noindent

     return $
\end_layout

\begin_layout Plain Layout
\noindent

       mkLast SExit |*><*| mkLabel lsur
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Järgnevalt on käsitletud juhtu, kui lause ASTis on kui-siis-muidu hargnemine
 (kood 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Lausete-transleerimine"

\end_inset

, rida 18): kui avaldise 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

e
\end_layout

\end_inset

 on väärtus on tõene, siis täidetakse lausete jada 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

ts
\end_layout

\end_inset

, vastasel juhul jada 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

fs
\end_layout

\end_inset

.
 Genereeritakse märgend 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

endif
\end_layout

\end_inset

 (rida 19), kuhu juhtvoog naaseb peale tõese / väära haru täitmist.
 Kummagi lausete haru kohta genereeritakse märgend (
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

ltrue
\end_layout

\end_inset

 / 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

lfalse
\end_layout

\end_inset

, read 20-21) ja transleeritakse laused graafiks (
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

tbranch
\end_layout

\end_inset

 / 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

fbranch
\end_layout

\end_inset

, read 23-24).
 Avaldis transleeritakse abimuutujaks 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

t
\end_layout

\end_inset

 ja graafiks 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

g
\end_layout

\end_inset

 (rida 22), mis seotakse 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

SIfThenElse t ltrue lfalse
\end_layout

\end_inset

 sõlmest tehtud graafiga (rida 26).
 Saadud graaf on väljumisel suletud ning seotakse operaatoriga 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

|*><*|
\end_layout

\end_inset

 sisenemisel suletud graafiga, mis on tehtud märgendist 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

ltrue
\end_layout

\end_inset

 (rida 27).
 Tulemuseks on väljumisel avatud graaf, mis seotakse graafiga 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

tbranch
\end_layout

\end_inset

 ning seejärel väljumisel suletud graafiga (rida 27), mis on funktsiooniga
 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

mkBranch
\end_layout

\end_inset

 tehtud märgendist 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

endif
\end_layout

\end_inset

.
 Saadakse väljumisel suletud graaf.
 Sarnaselt seotakse väär haru (rida 28).
 Kui-siis-muidu lausele vastav graaf saadakse, sidudes seni koostatud graafile
 operaatoriga 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

|*><*|
\end_layout

\end_inset

 sisenemisel suletud ja väljumisel avatud graaf 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

mkLabel endif
\end_layout

\end_inset

 (rida 29).
\end_layout

\begin_layout Standard
Koodis 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Loendava-tsükli-lause"

\end_inset

 on transleeritud loenduriga tsükli lause (rida 1).
 Muutuja 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

i
\end_layout

\end_inset

 algväärtus on määratud avaldisega 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

e0
\end_layout

\end_inset

.
 Tsükli keha ehk lausete jada 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

body
\end_layout

\end_inset

 täidetakse, kui loendur 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

i
\end_layout

\end_inset

 pole suurem avaldisega 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

eh
\end_layout

\end_inset

 määratud väärtusest.
 Peale keha täitmist suurendatatakse loendurit 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

i
\end_layout

\end_inset

 ühe võrra.
 Tsükli saab jagada osadeks: ettevalmistamine, kontroll, keha täitmine,
 loenduri suurendamine.
 Genereeritakse märgendid:
\end_layout

\begin_layout Itemize
rida 3 --- 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

ltest
\end_layout

\end_inset

 tähistab kontrolli osa; peale ettevalmistamist või loenduri suurendamist
 kandub juhtvoog üle kontrollile;
\end_layout

\begin_layout Itemize
rida 4 --- 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

lbody
\end_layout

\end_inset

 tähistab keha; juhtvoog kandub kehale vastavalt kontrolli tulemusele;
\end_layout

\begin_layout Itemize
rida 5 --- 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

linc
\end_layout

\end_inset

 tähistab loenduri suurendamist; peale keha või 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

Continue
\end_layout

\end_inset

 lause täitmist kandub juhtvoog loenduri suurendamisele;
\end_layout

\begin_layout Itemize
rida 6 --- 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

lafter
\end_layout

\end_inset

 tähistab tsüklile järgnevat; juhtvoog satub siia, kas peale 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

Break
\end_layout

\end_inset

 lause täitmist või vastavalt kontrolli tulemusele.
\end_layout

\begin_layout Standard
Tsükli osad saab koostada lausete ASTidest, mille transleerimist on kirjeldatud
 ülal.
 Funktsioonide 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

s2g
\end_layout

\end_inset

 ja 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

e2g
\end_layout

\end_inset

 tüübid eeldavad annoteeritud argumente.
 Selleks on kasutatud funktsiooni 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

a
\end_layout

\end_inset

 (rida 8), mis annoteerib oma argumendi tsüklilause annotatsiooniga.
\end_layout

\begin_layout Standard
Loenduri 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

i
\end_layout

\end_inset

 ülemine piir olgu salvestatud muutujasse 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

h
\end_layout

\end_inset

 (kood 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Loendava-tsükli-lause"

\end_inset

, rida 9), mille nimi on koostatud selliselt, et vältida nimeruumi konflikti
 teiste muutujatega.
 Väärtustamiste vasakul pooltel 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

lvari
\end_layout

\end_inset

 ja 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

lvarh
\end_layout

\end_inset

 on vastavalt muutujad 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

i
\end_layout

\end_inset

 ja 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

h
\end_layout

\end_inset

 (read 10 ja 11).
 Lauses 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

s0
\end_layout

\end_inset

 omistatakse muutujale 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

i
\end_layout

\end_inset

 avaldise 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

e0
\end_layout

\end_inset

 väärtus (rida 12) ja lauses 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

sh
\end_layout

\end_inset

 omistatakse muutujale 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

h
\end_layout

\end_inset

 avaldise 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

eh
\end_layout

\end_inset

 väärtus (rida 13).
 Laused transleeritakse vastavalt graafideks 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

g0
\end_layout

\end_inset

 ja 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

gh
\end_layout

\end_inset

 (read 14 ja 15).
 Ettevalmistamise osa (rida 32) saadakse graafide 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

g0
\end_layout

\end_inset

 ja 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

gh
\end_layout

\end_inset

 sidumisest graafiga 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

mkBranch ltest
\end_layout

\end_inset

, mis kannab juhtvoo edasi kontrolli osale.
\end_layout

\begin_layout Standard
Kontrollis võrreldakse muutujaid 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

i
\end_layout

\end_inset

 ja 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

h
\end_layout

\end_inset

.
 Neile vastavad avaldiste ASTid 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

vari
\end_layout

\end_inset

 ja 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

varh
\end_layout

\end_inset

 (kood 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Loendava-tsükli-lause"

\end_inset

, read 17 ja 18).
 Kontrollile vastab avaldis 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

test
\end_layout

\end_inset

 (rida 19), mis transleeritakse kontrolli tulemust hoidvaks abimuutujaks
 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

t
\end_layout

\end_inset

 ja graafiks 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

gtest
\end_layout

\end_inset

 (rida 20).
 Kontrolli lause olgu 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

sif
\end_layout

\end_inset

 (rida 21): kui abimuutuja 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

t
\end_layout

\end_inset

 on tõene, st muutuja 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

i
\end_layout

\end_inset

 on suurem kui muutuja 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

h
\end_layout

\end_inset

, siis juhtvoog jätkab märgendist 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

lafter
\end_layout

\end_inset

, vastasel korral märgendist 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

lbody
\end_layout

\end_inset

.
 Kontrolli osa (rida 33) saadakse märgendist 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

ltest
\end_layout

\end_inset

 koostatud graafi sidumisel graafidega 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

gtest
\end_layout

\end_inset

 ja lausest 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

sif
\end_layout

\end_inset

 tehtud graafiga.
\end_layout

\begin_layout Standard
Keha täidetakse graafis 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

gbody
\end_layout

\end_inset

 (kood 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Loendava-tsükli-lause"

\end_inset

, read 23-24), mis saadakse funktsiooniga 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

localL
\end_layout

\end_inset

 muudetud keskkonnas lausete jada 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

body
\end_layout

\end_inset

 transleerimisel funktsiooniga 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

ss2g
\end_layout

\end_inset

.
 Keskkonnas seotakse sõne 
\begin_inset Quotes gld
\end_inset

continue
\begin_inset Quotes grd
\end_inset

 märgendiga 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

linc
\end_layout

\end_inset

 ja sõne 
\begin_inset Quotes gld
\end_inset

break
\begin_inset Quotes grd
\end_inset

 märgendiga 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

lafter
\end_layout

\end_inset

 (read 23 ja 24).
 Graaf 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

gbody
\end_layout

\end_inset

 seotakse vasakult keha märgendist koostatud algusgraafiga ja paremalt hargnemis
ega loenduri suurendamise osale (rida 34).
\end_layout

\begin_layout Standard
Loenduri suurendamiseks omistatakse lausega 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

sinc
\end_layout

\end_inset

 vasakule poolele 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

lvari
\end_layout

\end_inset

 (kood 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Loendava-tsükli-lause"

\end_inset

, rida 26), milles on muutuja 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

i
\end_layout

\end_inset

, väärtus (read 27-28), mis saadakse muutujale 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

i
\end_layout

\end_inset

 literaali 1 liitmisel.
 See lause transleeritakse graafiks 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

ginc
\end_layout

\end_inset

 (rida 29), mis seotakse vasakult algusgraafiga ja paremalt hargnemisega
 kontrolli osale (rida 35).
\end_layout

\begin_layout Standard
Saadud osade graafid seotakse suletud otstest terviklikuks graafiks, mis
 on otstest avatud ning mis vastab tsükli lausele (kood 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Loendava-tsükli-lause"

\end_inset

, read 32-36).
\end_layout

\begin_layout Standard
Koodis 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Lausete-transleerimine"

\end_inset

 on transleeritud juhtvoo suunamise laused: 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

Continue
\end_layout

\end_inset

, 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

Break
\end_layout

\end_inset

 ja 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

Exit
\end_layout

\end_inset

.
 Esimesed 2 neist loevad keskkonnast vastava märgendi (read 33, 39) ja koostavad
 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

mkBranch
\end_layout

\end_inset

 funktsiooniga sellest väljumisel suletud graafi (read 35, 41).
 Kuna 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

s2g
\end_layout

\end_inset

 funktsiooni tüüp nõuab väljumisel avatud graafi, siis genereeritakse surrogaatm
ärgend 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

lsur
\end_layout

\end_inset

 (read 32, 38, 44), mis 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

mkLabel
\end_layout

\end_inset

 funktsiooniga tehakse graafiks ja operaatoriga 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

|*><*|
\end_layout

\end_inset

 seotakse eelnevalt koostatud graafi külge (read 35-36, 41-42, 46).
 Märgend 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

lsur
\end_layout

\end_inset

 ei oma juhtvoo kulgemise seisukohalt sisu --- juhtvoog ei jõua sinna kunagi
 ja hiljem on võimalik selline sõlm graafist eemalda.
 Lause 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

Exit
\end_layout

\end_inset

 korral tehakse väljumisel suletud graaf funktsiooniga 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

mkLast SExit
\end_layout

\end_inset

 (rida 46), mis samamoodi seotakse surrogaatmärgendist tehtud graafiga.
\end_layout

\begin_layout Standard
\noindent
\begin_inset listings
lstparams "basicstyle={\sffamily},float,language=Haskell,numbers=left"
inline false
status open

\begin_layout Plain Layout
\noindent

\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:Loendava-tsükli-lause"

\end_inset

Loendava tsükli lause transleerimine
\end_layout

\end_inset

s2g forStatement @ (content -> For i e0 eh body) =
\end_layout

\begin_layout Plain Layout
\noindent

  do -- labels
\end_layout

\begin_layout Plain Layout
\noindent

     ltest <- freshL
\end_layout

\begin_layout Plain Layout
\noindent

     lbody <- freshL
\end_layout

\begin_layout Plain Layout
\noindent

     linc <- freshL
\end_layout

\begin_layout Plain Layout
\noindent

     lafter <- freshL
\end_layout

\begin_layout Plain Layout
\noindent

     -- initializiation part
\end_layout

\begin_layout Plain Layout
\noindent

     let a = flip Annotate $ annotation forStatement
\end_layout

\begin_layout Plain Layout
\noindent

         h = i ++ "~High"
\end_layout

\begin_layout Plain Layout
\noindent

         lvari = a $ LVariable i
\end_layout

\begin_layout Plain Layout
\noindent

         lvarh = a $ LVariable h
\end_layout

\begin_layout Plain Layout
\noindent

         s0 = a $ Assign lvari e0
\end_layout

\begin_layout Plain Layout
\noindent

         sh = a $ Assign lvarh eh
\end_layout

\begin_layout Plain Layout
\noindent

         g0 <- s2g s0
\end_layout

\begin_layout Plain Layout
\noindent

         gh <- s2g sh
\end_layout

\begin_layout Plain Layout
\noindent

     -- test part
\end_layout

\begin_layout Plain Layout
\noindent

     let vari = a $ Variable i
\end_layout

\begin_layout Plain Layout
\noindent

         varh = a $ Variable h
\end_layout

\begin_layout Plain Layout
\noindent

         test = a $ Op IsGT vari varh
\end_layout

\begin_layout Plain Layout
\noindent

         (t, gtest) <- e2g test
\end_layout

\begin_layout Plain Layout
\noindent

     let sif = SIfThenElse t lafter lbody
\end_layout

\begin_layout Plain Layout
\noindent

     -- body part
\end_layout

\begin_layout Plain Layout
\noindent

     gbody <- localL [("continue", linc)
\end_layout

\begin_layout Plain Layout
\noindent

                     , ("break", lafter)] (ss2g body)
\end_layout

\begin_layout Plain Layout
\noindent

     -- increment part
\end_layout

\begin_layout Plain Layout
\noindent

     let sinc = a $ Assign lvari $
\end_layout

\begin_layout Plain Layout
\noindent

                  a $ Op Add vari $
\end_layout

\begin_layout Plain Layout
\noindent

                    a $ Literal $ LInteger 1
\end_layout

\begin_layout Plain Layout
\noindent

     ginc <- s2g sinc
\end_layout

\begin_layout Plain Layout
\noindent

     -- loop
\end_layout

\begin_layout Plain Layout
\noindent

     return $
\end_layout

\begin_layout Plain Layout
\noindent

       g0 <*> gh <*> mkBranch ltest |*><*|
\end_layout

\begin_layout Plain Layout
\noindent

       mkLabel ltest <*> gtest <*> mkLast sif |*><*|
\end_layout

\begin_layout Plain Layout
\noindent

       mkLabel lbody <*> gbody <*> mkBranch linc |*><*|
\end_layout

\begin_layout Plain Layout
\noindent

       mkLabel linc <*> ginc <*> mkBranch ltest |*><*|
\end_layout

\begin_layout Plain Layout
\noindent

       mkLabel lafter
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Programmi transleerimine
\end_layout

\begin_layout Standard
Järgnevalt on esitatud programmi ASTi transleerimine vahe-esitusse funktsiooniga
 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

runAstToIr
\end_layout

\end_inset

 (kood 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Programmi-transleerimine"

\end_inset

, read 1-2).
 Seejuures funktsioon 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

astToIr
\end_layout

\end_inset

 on transleerimismonaadis (rida 4).
 Annoteeritud argumendi sisu sobitatakse 
\emph on
ViewPattern
\emph default
-mustriga content.
 Sisust ehk programmi ASTi kirjest seotakse programmi keha 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

progBody
\end_layout

\end_inset

 väli muutujaga 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

body
\end_layout

\end_inset

 (rida 5) ning globaalsete muutujate deklaratsioonid 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

progVariables
\end_layout

\end_inset

 muutujaga 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

vars
\end_layout

\end_inset

 (rida 6).
 Genereeritakse märgend 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

lentry
\end_layout

\end_inset

 (rida 7), mis on programmi vahe-esituse algusmärgendiks 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

entry
\end_layout

\end_inset

 (rida 11), ning transleeritakse keha lausete jada body funktsiooniga 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

ss2g
\end_layout

\end_inset

 otstest avatud graafiks 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

gs
\end_layout

\end_inset

 (rida 8).
 Funktsiooniga 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

mkLast
\end_layout

\end_inset

 muudetakse väljumisel suletud sõlm 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

SExit
\end_layout

\end_inset

 väljumisel suletud graafiks (rida 14).
 Programmi IR-i kirje väli 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

body
\end_layout

\end_inset

 on otstest suletud graaf, mis on operaatoriga 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

<*>
\end_layout

\end_inset

 seotud kokku kolmest graafist (rida 14): 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

mkLabel
\end_layout

\end_inset

-iga algusmärgendist (
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

lentry
\end_layout

\end_inset

) tehtud algus-graafist, keha lausetele vastavast graafist 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

gs
\end_layout

\end_inset

 ja 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

mkLast
\end_layout

\end_inset

-iga tehtud lõpugraafist.
 Programmi IR-i muutujad väljal 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

progVars
\end_layout

\end_inset

 saadakse, rakendades f-ni 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

astVarToIrVars
\end_layout

\end_inset

-i igale globaalmuutuja deklaratsioonile ja aheldades saadud vasakpoolte
 jadad.
 Programmi IR-i abimuutujad 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

tempVars
\end_layout

\end_inset

 on leitud funktsiooniga 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

usedTs
\end_layout

\end_inset

 peale keha transleerimist.
 Kuigi kõik muutujad ei pruugi kehas kasutust leida, eriti pärast optimeerimisi,
 on see piisav edasisteks analüüsideks.
 Alternatiivina saaks koguda kasutatud muutujad läbides kehale vastava graafi
 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

gs
\end_layout

\end_inset

 Hoopl-teegi poolt pakutavate funktsioonidega 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

postorder_dfs
\end_layout

\end_inset

 või 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

preorder_dfs
\end_layout

\end_inset

 ja korrata kogumist peale optimeerimist.
\end_layout

\begin_layout Standard
Lausete ASTide jada transleeritakse otstest avatud graafiks (kood 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Programmi-transleerimine"

\end_inset

, rida 16), mis saadakse iga lause transleerimisel otstest avatud graafiks
 funktsiooniga 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

s2g
\end_layout

\end_inset

 (rida 18) ja saadud graafide jada sidumisel funktsiooniga 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

catGraphs
\end_layout

\end_inset

 (rida 19), mis seob jada elemendid operaatoriga 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

<*>
\end_layout

\end_inset

 terviklikuks graafiks.
\end_layout

\begin_layout Standard
Koodis 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Programmi-transleerimine"

\end_inset

 on toodud tüübiinfoga annoteeritud muutuja muutmine vasakpoolte jadaks
 (rida 21).
 Kui muutuja on kirje tüüpi (rida 26), siis jadasse lisatakse muutuja nimi
 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

symbolname s
\end_layout

\end_inset

 kombineeritud kirje iga välja nimega 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

fst f
\end_layout

\end_inset

 mähituna konstruktorisse 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

LFld
\end_layout

\end_inset

 (rida 27).
 Ülejäänud muutuja tüüpide, sh massiivi, korral on jadaks muutuja nimest
 konstrueeritud 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

LVar
\end_layout

\end_inset

 (rida 28).
 Kuigi massiivi jaoks on eraldi konstruktor 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

LArr
\end_layout

\end_inset

, pole seda kasutatud, kuna see eeldab teadmist masiivi indeksi kohta abimuutuja
 näol.
 Massiivi elemendi omistamine / kasutamine sisaldab endas aliaste probleemi:
 erinevad abimuutujad võivad viidata massiivi ühele indeksile ja seda tuleb
 optimeerimise analüüsides arvesse võtta.
\end_layout

\begin_layout Standard
\noindent
\begin_inset listings
lstparams "basicstyle={\sffamily},float,language=Haskell,numbers=left"
inline false
status open

\begin_layout Plain Layout
\noindent

\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:Programmi-transleerimine"

\end_inset

Programmi transleerimine
\end_layout

\end_inset

runAstToIr :: Program :~ TypeAnn -> IProgram
\end_layout

\begin_layout Plain Layout
\noindent

runAstToIr = runTranslationMonad .
 astToIr
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\noindent

astToIr :: Program :~ TypeAnn -> TranslationMonad IProgram
\end_layout

\begin_layout Plain Layout
\noindent

astToIr (content -> Program { progVariables = vars
\end_layout

\begin_layout Plain Layout
\noindent

                           , progBody = body }) =
\end_layout

\begin_layout Plain Layout
\noindent

  do lentry <- freshL
\end_layout

\begin_layout Plain Layout
\noindent

     gs <- ss2g body
\end_layout

\begin_layout Plain Layout
\noindent

     temps <- usedTs
\end_layout

\begin_layout Plain Layout
\noindent

     return $ IProgram
\end_layout

\begin_layout Plain Layout
\noindent

       { entry = lentry
\end_layout

\begin_layout Plain Layout
\noindent

       , progVars = concat $ map astVarToIrVars vars
\end_layout

\begin_layout Plain Layout
\noindent

       , tempVars = temps
\end_layout

\begin_layout Plain Layout
\noindent

       , body = mkLabel lentry <*> gs <*> mkLast SExit }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\noindent

ss2g :: [Statement :~ a] -> TranslationMonad (Graph Stmnt O O)
\end_layout

\begin_layout Plain Layout
\noindent

ss2g ss =
\end_layout

\begin_layout Plain Layout
\noindent

  do gs <- mapM s2g ss
\end_layout

\begin_layout Plain Layout
\noindent

     return $ catGraphs gs
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\noindent

astVarToIrVars :: Annotate Symbol TypeAnn -> [LVal]
\end_layout

\begin_layout Plain Layout
\noindent

astVarToIrVars v = 
\end_layout

\begin_layout Plain Layout
\noindent

  let s = content v
\end_layout

\begin_layout Plain Layout
\noindent

      t = annotation v
\end_layout

\begin_layout Plain Layout
\noindent

  in case typeOf t of
\end_layout

\begin_layout Plain Layout
\noindent

       TRecord fields -> do f <- fields
\end_layout

\begin_layout Plain Layout
\noindent

                           return $ LFld (symbolName s) (fst f)
\end_layout

\begin_layout Plain Layout
\noindent

       _ -> return $ LVar (symbolName s)
\end_layout

\end_inset


\end_layout

\begin_layout Section
Optimeerimine
\end_layout

\begin_layout Standard
Selle osa eesmärk on vahe-esituse optimeerimine teegiga Hoopl.
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Hoopli-analüüsi-sooritus"

\end_inset

Hoopl-teegi analüüsi sooritus: andmevoo võre, ülekandefunktsioon ja vahe-esituse
 ümberkirjutamine
\end_layout

\begin_layout Standard
Teek Hoopl muundab juhtvoo graafe.
 Kasutaja ülesanne on lisaks sõlme tüübile koostada:
\end_layout

\begin_layout Itemize
faktide andmetüüp, mis on aluseks andmevoo võrele 
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

DataflowLattice
\end_layout

\end_inset

;
\end_layout

\begin_layout Itemize
ülekandefunktsioon 
\begin_inset listings
lstparams "basicstyle={\ttfamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

FwdTransfer
\end_layout

\end_inset

 / 
\begin_inset listings
lstparams "basicstyle={\ttfamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

BwdTransfer
\end_layout

\end_inset

, mis sõlmest koostab fakti muundaja: sisendiks on sõlme sisenev fakt ja
 väljundiks on muundatud fakt;
\end_layout

\begin_layout Itemize
ümberkirjutamisefunktsioon 
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

FwdRewrite
\end_layout

\end_inset

 / 
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

BwdRewrite
\end_layout

\end_inset

, mis sõlme ja fakti sisendi korral annab väljundiks graafi, mis asendab
 sõlme.
\end_layout

\begin_layout Standard
Need koondatakse analüüsi soorituse kirjesse vastavalt analüüsi suunale:
 pärisuunas 
\emph on

\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

FwdPass
\end_layout

\end_inset


\emph default
 ja vastusuunas 
\begin_inset listings
lstparams "language=Haskell"
inline true
status open

\begin_layout Plain Layout

BwdPass
\end_layout

\end_inset

.
 
\begin_inset CommandInset citation
LatexCommand cite
after "lk. 4-5"
key "hoopl'10"

\end_inset


\end_layout

\begin_layout Standard
Andmevooanalüüsi fakt mingis programmi punktis kinnitab väite kehtivust
 selles punktis sõltumata teest, kuidas sellesse punkti jõuti, kuid arvestades
 analüüsi suunda, st millises järjekorras punkte läbitakse.
 Faktide hulk peab moodustama võre ja selleks tuleb näidata võre alumine
 element 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

fact_bot
\end_layout

\end_inset

 ja kuidas leida kahe elemendi ülemraja 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

fact_join
\end_layout

\end_inset

.
 Jõudlusest lähtudes peab 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

fact_join
\end_layout

\end_inset

 lisaks rajale tagastama ka fakti muutumise lipu 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

ChangeFlag
\end_layout

\end_inset

: 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

SomeChange
\end_layout

\end_inset

, kui ülemraja on erinev esialgsest faktist, või 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

NoChange
\end_layout

\end_inset

, kui esialgne fakt ongi ülemrajaks.
 
\begin_inset CommandInset citation
LatexCommand cite
after "lk. 5-6"
key "hoopl'10"

\end_inset


\end_layout

\begin_layout Standard
Hoopl-teek põimib omavahel ülekandefunktsiooniga faktide kogumise ja vahe-esitus
e ümberkirjutamise 
\begin_inset CommandInset citation
LatexCommand cite
after "lk. 9"
key "hoopl'10"

\end_inset

.
 Ühes soorituses tehakse ümberkirjutamist korduvalt ja soorituse implementatsioo
nis vea leidmine, võrreldes vahe-esituse alg- ja lõpptulemust, ei ole lihtne.
 Hoopl-teek võimaldab analüüsi sooritust siluda, kasutades 
\begin_inset Quotes gld
\end_inset

kütuse
\begin_inset Quotes grd
\end_inset

-monaadi tüübiklassi 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

FuelMonad
\end_layout

\end_inset

.
 Iga ümberkirjutamine kasutab ära ühe ühiku kütust ja ümberkirjutamist jätkataks
e seni, kuni jätkub kütust.
 Muutes kütuse alghulka, saab kontrollida ümberkirjutamiste arvu, kuni leitakse
 viga.
 
\begin_inset CommandInset citation
LatexCommand cite
after "lk. 11"
key "hoopl'10"

\end_inset

 Käesolev töö silumist ei uuri ja analüüs sooritatakse 
\begin_inset Quotes gld
\end_inset

lõputu kütuse
\begin_inset Quotes grd
\end_inset

 monaadis 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

InfiniteFuelMonad
\end_layout

\end_inset

, seega ümberkirjutamist jätkatakse, kuni vahe-esituse ümberkirjutamine
 ei muuda tulemust.
\end_layout

\begin_layout Standard
Koodis 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Analüüsi-sooritus-no-optimizatio"

\end_inset

 on toodud triviaalne analüüsi sooritus, mis sisuliselt ei optimeeri vahe-esitus
t.
 Sooritus 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

noOptPass
\end_layout

\end_inset

 põhineb pärisuuna analüüsil 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

FwdPass
\end_layout

\end_inset

 (read 1-2) ja kasutab andmevoo võret 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

noOptLattice
\end_layout

\end_inset

 (rida 3), ülekandefunktsiooni 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

noOptTransfer
\end_layout

\end_inset

 (rida 4) ja ümberkirjutamist 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

noOptRewrite
\end_layout

\end_inset

 (rida 5), mis on defineeritud allpool.
\end_layout

\begin_layout Standard
Fakti andmetüüp on 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

NoOptFact
\end_layout

\end_inset

 (kood 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Analüüsi-sooritus-no-optimizatio"

\end_inset

, rida 7), mille ainus andmekonstruktor 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

NA
\end_layout

\end_inset

 tähistab fakti sisutust.
 Andmevoo võre 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

noOptLattice
\end_layout

\end_inset

 alumiseks elemendiks on 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

NA
\end_layout

\end_inset

 (rida 12) ja vähim ülemtõke leitakse funktsiooniga 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

join
\end_layout

\end_inset

 (rida 13), mis tagastab alati algse fakti ilma muutusteta (read 15-18).
 Võre nimi 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

fact_name
\end_layout

\end_inset

 on toodud dokumenteerimise huvides (rida 11).
 Funktsiooni 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

join
\end_layout

\end_inset

 esimene argument on mõeldud silumiseks ja näitab, millise märgendi juures
 toimub ülemraja leidmine.
\end_layout

\begin_layout Standard
Ülekandefunktsioon 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

noOptTransfer
\end_layout

\end_inset

 (kood 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Analüüsi-sooritus-no-optimizatio"

\end_inset

, read 20-21) koostatakse funktsioonist 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

ft
\end_layout

\end_inset

, mis on polümorfne sõlme tüübi suhtes (rida 23): 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

Fact
\end_layout

\end_inset

 on tüübi perekond, mille eksemplarideks on üksik 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

NoOptFact
\end_layout

\end_inset

 tüüpi fakt ja märgendite-faktide vastend 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

FactBase
\end_layout

\end_inset

.
 Väljumisel avatud sõlme puhul on tulemuseks üksik fakt.
 Väljumisel suletud sõlme puhul on tulemuseks märgendite ja faktide vastend,
 iga väljuva serva kohta üks fakt.
 Antud analüüsi soorituses kanname sõlme siseneva fakti 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

f
\end_layout

\end_inset

 ilma muutusteta üle (read 24-26, 28-32).
 Funktsioon 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

mapEmpty
\end_layout

\end_inset

 tähistab tühja vastendit (rida 27), 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

mapSingleton
\end_layout

\end_inset

 vastendab argumendid (read 31-32) ja 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

mkFactBase
\end_layout

\end_inset

 koostab märgendi-fakti paaride jadast vastendi (read 29-30).
\end_layout

\begin_layout Standard
Vahe-esituse ümberkirjutamine toimub 
\begin_inset Quotes gld
\end_inset

kütuse
\begin_inset Quotes grd
\end_inset

-monaadis funktsiooniga 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

fr
\end_layout

\end_inset

 (kood 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Analüüsi-sooritus-no-optimizatio"

\end_inset

, rida 36), seejuures 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

mkFRewrite
\end_layout

\end_inset

 kasutamine hoolitseb, et järgitakse kütuse kasutamise reegleid.
 Kuna sisulist ümberkirjutamist ei toimu, siis tagastatakse sõlmest ja faktist
 sõltumata alati 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

Nothing
\end_layout

\end_inset

 (rida 39), mis tähendab, et sõlm kirjutatakse muutusteta väljund-graafi.
\end_layout

\begin_layout Standard
Vahe-esituse programmi ümberkirjutamist 
\begin_inset Quotes gld
\end_inset

lõputu kütuse
\begin_inset Quotes grd
\end_inset

 monaadis ja uute märgendite genereerimiseks 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

SimpleUniqueMonad
\end_layout

\end_inset

-is on tähistatud lühidalt sooritusena 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

Pass
\end_layout

\end_inset

 (kood 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Analüüsi-sooritus-no-optimizatio"

\end_inset

, 41).
 Sooritus 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

optNothing
\end_layout

\end_inset

 seob programmi algusmärgendi muutujaga 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

e
\end_layout

\end_inset

 ja keha muutujaga 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

b
\end_layout

\end_inset

 (rida 44), seejärel analüüsib ja kirjutab vahe-esituse ümber funktsiooniga
 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

analyzeAndRewriteFwd
\end_layout

\end_inset

 (rida 45), kasutades:
\end_layout

\begin_layout Itemize
soorituse kirjet 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

noOptPass
\end_layout

\end_inset

,
\end_layout

\begin_layout Itemize
kehasse sisenemise punktide hulka, milleks antud juhul on sisenemisel suletud
 märgend 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

e
\end_layout

\end_inset

,
\end_layout

\begin_layout Itemize
keha 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

b
\end_layout

\end_inset

,
\end_layout

\begin_layout Itemize
algväärtustatud faktide hulka, milleks on märgendi 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

e
\end_layout

\end_inset

 vastend faktiga 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

NA
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
Tulemusena saadakse ümberkirjutatud keha 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

body'
\end_layout

\end_inset

, mis asendab vahe-esituse programmi keha (rida 47).
 Kuigi sisulist ümberkirjutamist ei tehta, kantakse väljund-graafi 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

body'
\end_layout

\end_inset

 üle ainult need plokid, mida läbiti ülekande funktsiooniga lähtudes sisenemise
 punktidest.
 Seega viskab 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

optNothing
\end_layout

\end_inset

 sooritus minema saavutamatud plokid.
 Saavutamatu koodi elimineerimine võib võimaldada teiste optimeerimiste
 kasutamise nagu näiteks 
\begin_inset Quotes gld
\end_inset

koodi sirgendamine
\begin_inset Quotes grd
\end_inset

 (ingl.
 code straightening) 
\begin_inset CommandInset citation
LatexCommand cite
after "lk. 580"
key "muchnick'97"

\end_inset

.
\end_layout

\begin_layout Standard
\noindent
\begin_inset listings
lstparams "basicstyle={\sffamily},float,language=Haskell,numbers=left"
inline false
status open

\begin_layout Plain Layout
\noindent

\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:Analüüsi-sooritus-no-optimizatio"

\end_inset

Analüüsi sooritus 
\emph on
no-optimization
\end_layout

\end_inset

noOptPass :: FuelMonad m => FwdPass m Stmnt NoOptFact
\end_layout

\begin_layout Plain Layout
\noindent

noOptPass = FwdPass
\end_layout

\begin_layout Plain Layout
\noindent

  { fp_lattice = noOptLattice
\end_layout

\begin_layout Plain Layout
\noindent

  , fp_transfer = noOptTransfer
\end_layout

\begin_layout Plain Layout
\noindent

  , fp_rewrite = noOptRewrite }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\noindent

data NoOptFact = NA -- Not Applicable
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\noindent

noOptLattice :: DataflowLattice NoOptFact
\end_layout

\begin_layout Plain Layout
\noindent

noOptLattice = DataflowLattice
\end_layout

\begin_layout Plain Layout
\noindent

  { fact_name = "no optimization"
\end_layout

\begin_layout Plain Layout
\noindent

  , fact_bot = NA
\end_layout

\begin_layout Plain Layout
\noindent

  , fact_join = join }
\end_layout

\begin_layout Plain Layout
\noindent

  where
\end_layout

\begin_layout Plain Layout
\noindent

    join :: Label ->
\end_layout

\begin_layout Plain Layout
\noindent

              OldFact NoOptFact -> NewFact NoOptFact ->
\end_layout

\begin_layout Plain Layout
\noindent

              (ChangeFlag, NoOptFact)
\end_layout

\begin_layout Plain Layout
\noindent

    join _ (OldFact o) _ = (NoChange, o)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\noindent

noOptTransfer :: FwdTransfer Stmnt NoOptFact
\end_layout

\begin_layout Plain Layout
\noindent

noOptTransfer = mkFTransfer ft
\end_layout

\begin_layout Plain Layout
\noindent

where
\end_layout

\begin_layout Plain Layout
\noindent

  ft :: Stmnt e x -> NoOptFact -> Fact x NoOptFact
\end_layout

\begin_layout Plain Layout
\noindent

  ft (SLabel _) f = f
\end_layout

\begin_layout Plain Layout
\noindent

  ft (STempAssign _ _) f = f
\end_layout

\begin_layout Plain Layout
\noindent

  ft (SLValAssign _ _) f = f
\end_layout

\begin_layout Plain Layout
\noindent

  ft (SExit) _ = mapEmpty
\end_layout

\begin_layout Plain Layout
\noindent

  ft (SGoto l) f = mapSingleton l f
\end_layout

\begin_layout Plain Layout
\noindent

  ft (SIfThenElse _ tl fl) f = mkFactBase noOptLattice [ (tl, f)
\end_layout

\begin_layout Plain Layout
\noindent

                                                       , (fl, f)]
\end_layout

\begin_layout Plain Layout
\noindent

  ft (SProcedure _ _ l) f = mapSingleton l f
\end_layout

\begin_layout Plain Layout
\noindent

  ft (SFun _ _ _ l) f = mapSingleton l f
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\noindent

noOptRewrite :: forall m.
 FuelMonad m =>
\end_layout

\begin_layout Plain Layout
\noindent

                  FwdRewrite m Stmnt NoOptFact
\end_layout

\begin_layout Plain Layout
\noindent

noOptRewrite = mkFRewrite fr
\end_layout

\begin_layout Plain Layout
\noindent

  where
\end_layout

\begin_layout Plain Layout
\noindent

    fr :: Stmnt e x -> NoOptFact -> m (Maybe (Graph Stmnt e x))
\end_layout

\begin_layout Plain Layout
\noindent

    fr _ _ = return Nothing
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\noindent

type Pass = IProgram -> InfiniteFuelMonad SimpleUniqueMonad IProgram
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\noindent

optNothing :: Pass
\end_layout

\begin_layout Plain Layout
\noindent

optNothing p@(IProgram { entry = e, body = b}) =
\end_layout

\begin_layout Plain Layout
\noindent

  do (body', _, _) <- analyzeAndRewriteFwd
\end_layout

\begin_layout Plain Layout
\noindent

                        noOptPass (JustC [e]) b (mapSingleton e NA)
\end_layout

\begin_layout Plain Layout
\noindent

     return $ p { body = body' }
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Konstandi voltimine ja levitamine
\end_layout

\begin_layout Standard
Konstandi voltimine seisneb avaldiste, mille operandideks on literaalid,
 arvutamises kompileerimise ajal.
 Konstandi levitamine tähendab muutuja, millele on omistatud literaal, kasutamis
e asendamist tema väärtusega, eeldusel, et muutujale pole vahepeal omistatud
 mõnda muud väärtust.
 Kuna fakte kogutakse samas järjekorras nagu läbitakse programmi täitmise
 ajal sõlmi, siis on tegu pärisuuna analüüsiga.
\end_layout

\begin_layout Standard
Vahe-esituses võib vaadelda kahte liiki muutujaid, mida on tähistatud kokkuvõtva
lt tüübiga 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

Var
\end_layout

\end_inset

 (kood 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Konstandi-voltimine-ja-3"

\end_inset

, rida 1): abimuutujad, tähistatud konstruktoriga 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

TVar
\end_layout

\end_inset

, ja programmi muutujad, st kõik, mis saab olla omistamislause vasakul poolel,
 tähistatuna 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

PVar
\end_layout

\end_inset

.
 Fakt sisaldab muutuja ja literaalide vastendamist (rida 2).
 Kasutatud on Hoopl-teegi abitüüpi 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

WithTop
\end_layout

\end_inset

, mis lisab tüübile võre moodustamiseks tippelemendi.
 Seega, kui muutuja on 
\begin_inset Quotes gld
\end_inset

konstant
\begin_inset Quotes grd
\end_inset

, st omab igal juhul üht kindlat väärtust, siis fakt vastandab muutujale
 andmekonstruktoris 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

PElem
\end_layout

\end_inset

 mingi literaali 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

Lit
\end_layout

\end_inset

.
 Kui muutuja ei ole konstant, siis faktile vastab element 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

Top
\end_layout

\end_inset

.
 Kui muutujat pole veel analüüsitud, siis on samuti tegu mittekonstandiga
 ehk 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

Top
\end_layout

\end_inset

-iga.
 Kahe fakti vähim ülemtõke leitakse funktsiooniga 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

fact_join
\end_layout

\end_inset

 (rida 8):
\end_layout

\begin_layout Standard
\noindent
\begin_inset listings
lstparams "basicstyle={\sffamily},float,language=Haskell,numbers=left"
inline false
status open

\begin_layout Plain Layout
\noindent

\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:Konstandi-voltimine-ja"

\end_inset

Konstandi voltimine ja levitamine --- andmevoo võre
\end_layout

\end_inset

data Var = TVar TempVar | PVar LVal
\end_layout

\begin_layout Plain Layout
\noindent

type ConstFact = Map Var (WithTop Lit)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\noindent

constLattice :: DataflowLattice ConstFact
\end_layout

\begin_layout Plain Layout
\noindent

constLattice = DataflowLattice
\end_layout

\begin_layout Plain Layout
\noindent

  { fact_name = "temp <- literal"
\end_layout

\begin_layout Plain Layout
\noindent

  , fact_bot = Map.empty
\end_layout

\begin_layout Plain Layout
\noindent

  , fact_join = joinMaps (extendJoinDomain constFactAdd) }
\end_layout

\begin_layout Plain Layout
\noindent

  where
\end_layout

\begin_layout Plain Layout
\noindent

    constFactAdd _ (OldFact old) (NewFact new)
\end_layout

\begin_layout Plain Layout
\noindent

      = if new == old then (NoChange, PElem new)
\end_layout

\begin_layout Plain Layout
\noindent

        else (SomeChange, Top)
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

constFactAdd
\end_layout

\end_inset

 ühendab omavahel kaks literaali, andes tulemuseks 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

Top
\end_layout

\end_inset

, kui need erinevad, ja 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

PElem
\end_layout

\end_inset

 literaali, kui nad on samad,
\end_layout

\begin_layout Itemize
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

extendJoinDomain
\end_layout

\end_inset

 laiendab ühendamise tippelementi säilitades kogu võrele, st kui kasvõi
 üks ühendatavatest on tippelement, siis on ka ühendamise tulemuseks tippelement
,
\end_layout

\begin_layout Itemize
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

joinMaps
\end_layout

\end_inset

 ühendab faktide vastandamised, kasutades elementide ühendamiseks eespool
 toodud funktsioone.
\end_layout

\begin_layout Standard
Fakti tüübist ja faktide ühendamise funktsioonist koostatakse võre 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

constLattice
\end_layout

\end_inset

, mille põhjas on tühi vastandus.
\end_layout

\begin_layout Standard
Koodis 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Konstandi-voltimine-ja-1"

\end_inset

 on toodud ülekandefunktsioon 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

varHasLit
\end_layout

\end_inset

 (rida 1).
\end_layout

\begin_layout Standard
Abimuutujale 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

t
\end_layout

\end_inset

 omistamine sõlmes 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

STempAssign
\end_layout

\end_inset

 (kood 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Konstandi-voltimine-ja-1"

\end_inset

, rida 5), lisab fakti 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

f
\end_layout

\end_inset

 teadmise selle muutuja 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

TVar t
\end_layout

\end_inset

 kohta: kui lihtsustatud avaldis 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

e
\end_layout

\end_inset

 on literaal 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

x
\end_layout

\end_inset

 (rida 7), siis on tegu konstandiga 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

PElem x
\end_layout

\end_inset

, vastasel korral muutuja ei ole konstant (rida 8), mida tähistatakse tippelemen
diga 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

Top
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
Vasakule poolele 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

lv
\end_layout

\end_inset

 abimuutuja 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

t
\end_layout

\end_inset

 omistamisel sõlmes 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

SLValAssign
\end_layout

\end_inset

 (kood 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Konstandi-voltimine-ja-1"

\end_inset

, rida 9) muudetakse faktis 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

f
\end_layout

\end_inset

 vasaku poole 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

PVal lv
\end_layout

\end_inset

 vaste samaväärseks abimuutuja 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

TVar t
\end_layout

\end_inset

 vastega.
 Kuna fakt on algväärtustatud, st abimuutujale leidub vaste, saab kasutada
 funktsiooni 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

fromJust
\end_layout

\end_inset

 otsingu tulemuse tõlgendamiseks (rida 10).
\end_layout

\begin_layout Standard
Kui vaadeldavaks sõlmeks on kui-siis-muidu hargnemine (kood 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Konstandi-voltimine-ja-1"

\end_inset

, rida 14), siis funktsiooniga 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

mkFactBase
\end_layout

\end_inset

 koostatakse märgendite-faktide vastend (rida 15), kusjuures tõese haru,
 märgendi 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

tl
\end_layout

\end_inset

, korral lisandub fakti 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

f
\end_layout

\end_inset

 teadmine abimuutuja 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

t
\end_layout

\end_inset

 tõesuse kohta (rida 16) ning väära haru, märgendi 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

fl
\end_layout

\end_inset

, korral vastavalt vääruse kohta (rida 17).
\end_layout

\begin_layout Standard
Protseduuri / funktsiooni väljakutse või hüpe märgendile ei lisa teadmisi
 muutujate kohta ja seega kannab ülekandefunktsioon fakti 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

f
\end_layout

\end_inset

 muutumatult edasi funktsiooniga 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

mapSingleton
\end_layout

\end_inset

 märgendile 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

l
\end_layout

\end_inset

 (kood 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Konstandi-voltimine-ja-1"

\end_inset

, read 13, 18, 19).
\end_layout

\begin_layout Standard
Märgendiga plokki sisenemine sõlmega 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

SLabel
\end_layout

\end_inset

 ei muuda fakti 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

f
\end_layout

\end_inset

 (kood 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Konstandi-voltimine-ja-1"

\end_inset

, rida 11).
\end_layout

\begin_layout Standard
Protseduuri lõpetamine sõlmega 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

SExit
\end_layout

\end_inset

 paneb piiri faktide kogumisele funktsiooniga 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

mapEmpty
\end_layout

\end_inset

 (kood 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Konstandi-voltimine-ja-1"

\end_inset

, rida 12).
 
\end_layout

\begin_layout Standard
\noindent
\begin_inset listings
lstparams "basicstyle={\sffamily},float,language=Haskell,numbers=left"
inline false
status open

\begin_layout Plain Layout
\noindent

\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:Konstandi-voltimine-ja-1"

\end_inset

Konstandi voltimine ja levitamine --- ülekandefunktsioon
\end_layout

\end_inset

varHasLit :: FwdTransfer Stmnt ConstFact
\end_layout

\begin_layout Plain Layout
\noindent

varHasLit = mkFTransfer ft
\end_layout

\begin_layout Plain Layout
\noindent

  where
\end_layout

\begin_layout Plain Layout
\noindent

    ft :: Stmnt e x -> ConstFact -> Fact x ConstFact
\end_layout

\begin_layout Plain Layout
\noindent

    ft (STempAssign t e) f =
\end_layout

\begin_layout Plain Layout
\noindent

      Map.insert (TVar t) (case e of
\end_layout

\begin_layout Plain Layout
\noindent

                             SLiteral x -> PElem x
\end_layout

\begin_layout Plain Layout
\noindent

                             _ -> Top) f
\end_layout

\begin_layout Plain Layout
\noindent

    ft (SLValAssign lv t) f = Map.insert (PVar lv)
\end_layout

\begin_layout Plain Layout
\noindent

                                (fromJust $ Map.lookup (TVar t) f) f
\end_layout

\begin_layout Plain Layout
\noindent

    ft (SLabel _) f = f
\end_layout

\begin_layout Plain Layout
\noindent

    ft (SExit) _ = mapEmpty
\end_layout

\begin_layout Plain Layout
\noindent

    ft (SGoto l ) f = mapSingleton l f
\end_layout

\begin_layout Plain Layout
\noindent

    ft (SIfThenElse t tl fl) f =
\end_layout

\begin_layout Plain Layout
\noindent

      mkFactBase constLattice 
\end_layout

\begin_layout Plain Layout
\noindent

        [ (tl, Map.insert (TVar t) (PElem (LBool True)) f)
\end_layout

\begin_layout Plain Layout
\noindent

        , (fl, Map.insert (TVar t) (PElem (LBool False)) f) ]
\end_layout

\begin_layout Plain Layout
\noindent

    ft (SProcedure _ _ l) f = mapSingleton l f
\end_layout

\begin_layout Plain Layout
\noindent

    ft (SFun _ _ _ l) f = mapSingleton l f
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Koodis 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Konstandi-voltimine-ja-2"

\end_inset

 on toodud vahe-esituse ümberkirjutamine 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

simplify
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
Kui sõlmeks on kui-siis-muidu hargnemine vastavalt abimuutuja 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

t
\end_layout

\end_inset

 tõeväärtusele (kood 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Konstandi-voltimine-ja-2"

\end_inset

, rida 6) ja abimuutujale 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

t
\end_layout

\end_inset

 leitakse funktsiooniga 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

lookup
\end_layout

\end_inset

 faktist 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

f
\end_layout

\end_inset

 konstantne vaste (rida 7), siis asendatakse kogu sõlm hüppega konkreetsele
 harule (read 8-9): vastavalt 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

t
\end_layout

\end_inset

 tõeväärtusele kas tõene haru 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

tl
\end_layout

\end_inset

 või väär haru 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

fl
\end_layout

\end_inset

.
 Kui vastet ei leita, siis 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

Maybe
\end_layout

\end_inset

 monaad annab tulemuseks 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

Nothing
\end_layout

\end_inset

, mida Hoopl-teek tõlgendab teadmisena, et sõlme ei muudetud.
\end_layout

\begin_layout Standard
Kui sõlmeks on abimuutujale 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

t
\end_layout

\end_inset

 tehte 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

SOp o l r
\end_layout

\end_inset

 tulemuse omistamine (kood 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Konstandi-voltimine-ja-2"

\end_inset

, rida 10) ning abimuutujatele 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

l
\end_layout

\end_inset

 ja 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

r
\end_layout

\end_inset

 leidub mõlemale konstantne vaste (read 11 ja 12), vastavalt 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

l'
\end_layout

\end_inset

 ja 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

r'
\end_layout

\end_inset

, siis funktsiooniga 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

eval
\end_layout

\end_inset

 arvutatakse operatsiooni 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

o l' r'
\end_layout

\end_inset

 tulemus, mis omistatakse abimuutujale 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

t
\end_layout

\end_inset

 kui literaal (rida 13).
 Tulemuse arvutamisel kompileerimise ajal tuleb arvestada eriolukordade:
 nulliga jagamine, ületäitumine, ujukomakäsu erandid, jm 
\begin_inset CommandInset citation
LatexCommand cite
after "lk. 329-331"
key "muchnick'97"

\end_inset

.
 Käesolev töö ei käsitle mainitud situatsioone.
\end_layout

\begin_layout Standard
Kui abimuutujale 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

t
\end_layout

\end_inset

 omistatakse lihtsustatud avaldis 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

e
\end_layout

\end_inset

 (kood 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Konstandi-voltimine-ja-2"

\end_inset

, rida 14), mis valvuriga 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

isExprVar
\end_layout

\end_inset

 kontollitult sisaldab programmi muutujat (rida 15), siis f-niga 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

toPVar
\end_layout

\end_inset

 teisendatakse avaldis 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

e
\end_layout

\end_inset

 programmi muutujaks, millele otsitakse faktist 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

f
\end_layout

\end_inset

 vaste 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

x
\end_layout

\end_inset

 (rida 16).
 Kui 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

x
\end_layout

\end_inset

 on konstant, siis asendatakse kogu sõlm abimuutujale 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

t
\end_layout

\end_inset

 literaali 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

SLiteral x
\end_layout

\end_inset

 omistamisega (rida 17).
\end_layout

\begin_layout Standard
Ülejäänud sõlmede puhul ümberkirjutamist ei tehta (kood 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Konstandi-voltimine-ja-2"

\end_inset

, rida 18).
\end_layout

\begin_layout Standard
Funktsioon 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

lookup
\end_layout

\end_inset

 otsib muutujale 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

t
\end_layout

\end_inset

 faktist 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

f
\end_layout

\end_inset

 vaste (kood 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Konstandi-voltimine-ja-2"

\end_inset

, read 20-22): tulemuseks on kas literaal 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

v
\end_layout

\end_inset

 mähituna andmekonstruktorisse 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

Just
\end_layout

\end_inset

 (rida 23) või muutuja mittekonstantsuse puhul 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

Nothing
\end_layout

\end_inset

 (rida 24).
\end_layout

\begin_layout Standard
Funktsioon 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

returnG
\end_layout

\end_inset

 muudab sõlme tüüpi argumendi graafiks ja tagastab selle 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

Maybe
\end_layout

\end_inset

-monaadis (kood 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Konstandi-voltimine-ja-2"

\end_inset

, read 8, 13, 17).
\end_layout

\begin_layout Standard
\noindent
\begin_inset listings
lstparams "basicstyle={\sffamily},float,language=Haskell,numbers=left"
inline false
status open

\begin_layout Plain Layout
\noindent

\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:Konstandi-voltimine-ja-2"

\end_inset

Konstandi voltimine ja levitamine --- ümberkirjutamine
\end_layout

\end_inset

simplify :: forall m.
 FuelMonad m => FwdRewrite m Stmnt ConstFact
\end_layout

\begin_layout Plain Layout
\noindent

simplify = mkFRewrite fold
\end_layout

\begin_layout Plain Layout
\noindent

  where
\end_layout

\begin_layout Plain Layout
\noindent

    fold :: Stmnt e x -> ConstFact -> m (Maybe (Graph Stmnt e x))
\end_layout

\begin_layout Plain Layout
\noindent

    -- fold if-then-else into goto
\end_layout

\begin_layout Plain Layout
\noindent

    fold (SIfThenElse t tl fl) f = return $
\end_layout

\begin_layout Plain Layout
\noindent

      do (LBool t') <- lookup (TVar t) f
\end_layout

\begin_layout Plain Layout
\noindent

         returnG $ SGoto $
\end_layout

\begin_layout Plain Layout
\noindent

           if t' then tl else fl
\end_layout

\begin_layout Plain Layout
\noindent

    fold (STempAssign t (SOp o l r)) f = return $
\end_layout

\begin_layout Plain Layout
\noindent

      do l' <- lookup (TVar l) f
\end_layout

\begin_layout Plain Layout
\noindent

         r' <- lookup (TVar r) f
\end_layout

\begin_layout Plain Layout
\noindent

        returnG $ STempAssign t $ SLiteral (eval (o, l', r'))
\end_layout

\begin_layout Plain Layout
\noindent

    fold (STempAssign t e) f
\end_layout

\begin_layout Plain Layout
\noindent

      | isExprVar e = return $
\end_layout

\begin_layout Plain Layout
\noindent

        do x <- lookup (toPVar e) f
\end_layout

\begin_layout Plain Layout
\noindent

           returnG $ STempAssign t $ SLiteral x
\end_layout

\begin_layout Plain Layout
\noindent

    fold _ _ = return Nothing
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\noindent

lookup :: Var -> ConstFact -> Maybe Lit
\end_layout

\begin_layout Plain Layout
\noindent

lookup t f =
\end_layout

\begin_layout Plain Layout
\noindent

  case Map.lookup t f of
\end_layout

\begin_layout Plain Layout
\noindent

    Just (PElem v) -> Just v
\end_layout

\begin_layout Plain Layout
\noindent

    _ -> Nothing
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Koodis 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Konstandi-voltimine-ja-3"

\end_inset

 on toodud konstandi voltimise ja levitamise sooritus 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

optConst
\end_layout

\end_inset

.
 Võrreldes 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

optNothing
\end_layout

\end_inset

 sooritusega (kood 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Analüüsi-sooritus-no-optimizatio"

\end_inset

, read 42-46), on kasutatud soorituse kirjet 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

constPropPass
\end_layout

\end_inset

, mis koondab võre 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

constLattice
\end_layout

\end_inset

, ülekandefunktsiooni 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

varHasLit
\end_layout

\end_inset

 ja ümberkirjutamise 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

simplify
\end_layout

\end_inset

, ning algväärtustatud fakti 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

initFact
\end_layout

\end_inset

 (kood 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Konstandi-voltimine-ja-3"

\end_inset

, read 11-14), mis saadakse programmimuutujate 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

ps
\end_layout

\end_inset

 ja abimuutujate 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

ts
\end_layout

\end_inset

 vastendamisel tippelemendiga 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

Top
\end_layout

\end_inset

, st kõik muutujad on alguses mittekonstantsed.
\end_layout

\begin_layout Standard
\noindent
\begin_inset listings
lstparams "basicstyle={\sffamily},float,language=Haskell,numbers=left"
inline false
status open

\begin_layout Plain Layout
\noindent

\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:Konstandi-voltimine-ja-3"

\end_inset

Konstandi voltimine ja levitamine --- sooritus
\end_layout

\end_inset

optConst :: Pass
\end_layout

\begin_layout Plain Layout
\noindent

optConst p@(IProgram { entry = e
\end_layout

\begin_layout Plain Layout
\noindent

                     , progVars = vs
\end_layout

\begin_layout Plain Layout
\noindent

                     , tempVars = ts
\end_layout

\begin_layout Plain Layout
\noindent

                     , body = b}) =
\end_layout

\begin_layout Plain Layout
\noindent

  do (body', _, _) <- analyzeAndRewriteFwd
\end_layout

\begin_layout Plain Layout
\noindent

                        constPropPass (JustC [e]) b $
\end_layout

\begin_layout Plain Layout
\noindent

                        mapSingleton e (initFact (vs, ts))
\end_layout

\begin_layout Plain Layout
\noindent

     return $ p { body = body' }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\noindent

initFact :: ([LVal], [TempVar]) -> ConstFact
\end_layout

\begin_layout Plain Layout
\noindent

initFact (vs, ts) = Map.fromList $
\end_layout

\begin_layout Plain Layout
\noindent

  [(TVar t, Top) | t <- ts] ++
\end_layout

\begin_layout Plain Layout
\noindent

  [(PVar v, Top) | v <- vs]
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Koopia levitamine
\end_layout

\begin_layout Standard
Kui programmi muutujale on omistatud mõni teine programmi muutuja, siis
 sisaldab muutuja originaalmuutuja väärtuse koopiat ning järgnevates sõlmedes
 võib muutuja kasutamise asendada originaalmuutuja kasutamisega, juhul kui
 originaali pole vahepeal muudetud.
 Analüüsi suund ühtib normaalse programmi täitmise suunaga.
\end_layout

\begin_layout Standard
Vaatluse all on Pascal-keele laused kujul 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Pascal"
inline true
status open

\begin_layout Plain Layout

X:=Y
\end_layout

\end_inset

, kuid vahe-esituses on nad kujul 
\begin_inset listings
lstparams "basicstyle={\sffamily}"
inline true
status open

\begin_layout Plain Layout

t<-Y; X<-t
\end_layout

\end_inset

.
 Seega peab andmevoo fakt talletama muutujate, nii abi- kui ka programmimuutujat
e, vastandamised.
 Kuna originaalmuutujale võidakse omistada uus väärtus, siis tuleb faktis
 vaste tühistada, arvestades andmevoograafi serval tühistamist liitumissõlmes.
 Selleks on vaste mähitud 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

WithTop
\end_layout

\end_inset

 tüübikonstruktorisse.
 
\end_layout

\begin_layout Standard
Koodis 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Koopia-võre"

\end_inset

 on toodud fakti tüüp 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

CopyFact
\end_layout

\end_inset

 (rida 1) ja sellega seonduvad abifunktsioonid: 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

copy
\end_layout

\end_inset

 lisab fatki 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

f
\end_layout

\end_inset

 vaste muutuja 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

src
\end_layout

\end_inset

 kui originaali ja muutuja 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

dst
\end_layout

\end_inset

 kui koopia vahel (read 3-4), 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

kill
\end_layout

\end_inset

 tühistab faktis 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

f
\end_layout

\end_inset

 muutuja 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

dst
\end_layout

\end_inset

 vaste (read 6-7), muutes selle 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

Top
\end_layout

\end_inset

-iks.
\end_layout

\begin_layout Standard
Vahe-esituses tehakse vahet abi- ja programmimuutuja tüüpidel, st üks ei
 saa olla sõlmes seal, kus saab teine, seega ümberkirjutamisel tuleb muutuja
 asendada sama tüüpi muutujaga.
 Kuna omistamislausetes ei saa muutujale omistada sama tüüpi muutujat, siis
 on faktis alati vastendatud abimuutujat programmimuutujaga või vastupidi.
 Seega sama tüüpi koopia leidmiseks tuleb otsida topelt.
 Funktsioon 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

lookupCopy
\end_layout

\end_inset

 otsib faktist 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

f
\end_layout

\end_inset

 muutuja 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

v
\end_layout

\end_inset

 originaali 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

v'
\end_layout

\end_inset

, millele otsitakse omakorda originaal 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

v''
\end_layout

\end_inset

, mis on sama tüüpi kui muutuja 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

v
\end_layout

\end_inset

 (kood 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Koopia-võre"

\end_inset

, read 9-12).
 Kui sellist koopiate ahelat ei leidu, siis tagastatakse 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

Nothing
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
\noindent
\begin_inset listings
lstparams "basicstyle={\sffamily},float,language=Haskell,numbers=left"
inline false
status open

\begin_layout Plain Layout
\noindent

\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:Koopia-võre"

\end_inset

Koopia levitamine --- andmevoo fakt
\end_layout

\end_inset

type CopyFact = Map Var (WithTop Var)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\noindent

copy :: Var -> Var -> CopyFact -> CopyFact
\end_layout

\begin_layout Plain Layout
\noindent

copy src dst f = Map.insert dst (PElem src) f
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\noindent

kill :: Var -> CopyFact -> CopyFact
\end_layout

\begin_layout Plain Layout
\noindent

kill dst f = Map.insert dst Top f
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\noindent

lookupCopy :: CopyFact -> Var -> Maybe Var
\end_layout

\begin_layout Plain Layout
\noindent

lookupCopy f v = do PElem v' <- Map.lookup v f
\end_layout

\begin_layout Plain Layout
\noindent

                    PElem v'' <- Map.lookup v' f
\end_layout

\begin_layout Plain Layout
\noindent

                    return v'' 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\noindent

lookupTemp :: CopyFact -> TempVar -> TempVar
\end_layout

\begin_layout Plain Layout
\noindent

lookupTemp f t = fromTVar $ fromMaybe (TVar t) $
\end_layout

\begin_layout Plain Layout
\noindent

  lookupCopy f (TVar t)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\noindent

lookupTemps :: CopyFact -> [TempVar] -> [TempVar]
\end_layout

\begin_layout Plain Layout
\noindent

lookupTemps f = map $ lookupTemp f
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Abimuutuja otsimiseks on lisaks funktsioon 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

lookupTemp
\end_layout

\end_inset

 (kood 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Koopia-võre"

\end_inset

, read 14-16), mis tagastab faktist 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

f
\end_layout

\end_inset

 abimuutuja 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

t
\end_layout

\end_inset

 originaali või 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

t
\end_layout

\end_inset

 enda, kui ei leidunud kopeeritud abimuutujat.
 Funktsioon 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

lookupTemps
\end_layout

\end_inset

 laiendab f-ni 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

lookupTemp
\end_layout

\end_inset

 abimuutujate jadale (read 18-19).
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

CopyFact
\end_layout

\end_inset

 ja 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

ConstFact
\end_layout

\end_inset

 on oma ülesehituselt sarnased ning neist konstrueeritud võred, 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

copyLattice
\end_layout

\end_inset

 ja 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

constLattice
\end_layout

\end_inset

, on samuti sarnased --- siinkohal pole 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

copyLattice
\end_layout

\end_inset

 esitatud.
\end_layout

\begin_layout Standard
Koodis 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Koopia-ülek"

\end_inset

 on toodud ülekandef-n 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

copyTransfer
\end_layout

\end_inset

.
 Sõlmes 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

STempAssign
\end_layout

\end_inset

 abimuutujale 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

t
\end_layout

\end_inset

 avaldise 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

e
\end_layout

\end_inset

 omistamisel (rida 5):
\end_layout

\begin_layout Itemize
kui avaldis 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

e
\end_layout

\end_inset

 sisaldab programmimuutujat, siis f-niga 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

copy
\end_layout

\end_inset

 tehakse koopia programmimuutujast abimuutujasse (rida 6),
\end_layout

\begin_layout Itemize
vastasel korral, nt kui avaldiseks on tehe või literaal, tühistatakse f-niga
 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

kill
\end_layout

\end_inset

 abimuutuja 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

t
\end_layout

\end_inset

 vaste (rida 7).
\end_layout

\begin_layout Standard
Koopia levitamises esineb aliaste probleem massiivide korral.
 Kuna faktist 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

CopyFact
\end_layout

\end_inset

 otsimine toimub muutujate järjekorra alusel ja muutujaid järjestatakse
 nimeliselt, mitte aga väärtuseliselt, siis: a) väheneb analüüsi agressiivsus,
 st faktist ei pruugi leida kõiki koopiaid, b) analüüs ei säilita konservatiivsu
st, sest vaste tühistamine ei toimi, ja optimeerimine võib anda vale tulemuse.
 Antud töös on aliaste analüüsil põhinevaid optimeerimisi välditud säilitades
 konservatiivsus, ent ohverdades agressiivsust: sõlmes massiivi elemendile
 omistamisel ei muudeta teadmisi koopiate kohta (kood 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Koopia-ülek"

\end_inset

, rida 8).
\end_layout

\begin_layout Standard
Teistes vasakpooltele omistamistel sõlmes 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

SLValAssign
\end_layout

\end_inset

 lisatakse fakti 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

f
\end_layout

\end_inset

 f-niga 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

copy
\end_layout

\end_inset

 abimuutujast 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

t
\end_layout

\end_inset

 koopia vasakusse poolde 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

lv
\end_layout

\end_inset

 (kood 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Koopia-ülek"

\end_inset

, rida 9).
\end_layout

\begin_layout Standard
\noindent
\begin_inset listings
lstparams "basicstyle={\sffamily},float,language=Haskell,numbers=left"
inline false
status open

\begin_layout Plain Layout
\noindent

\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:Koopia-ülek"

\end_inset

Koopia levitamine --- ülekandefunktsioon
\end_layout

\end_inset

copyTransfer :: FwdTransfer Stmnt CopyFact
\end_layout

\begin_layout Plain Layout
\noindent

copyTransfer = mkFTransfer ft
\end_layout

\begin_layout Plain Layout
\noindent

  where
\end_layout

\begin_layout Plain Layout
\noindent

    ft :: Stmnt e x -> CopyFact -> Fact x CopyFact
\end_layout

\begin_layout Plain Layout
\noindent

    ft (STempAssign t e) f
\end_layout

\begin_layout Plain Layout
\noindent

      | isExprVar e = copy (toPVar e) (TVar t) f
\end_layout

\begin_layout Plain Layout
\noindent

      | otherwise = kill (TVar t) f
\end_layout

\begin_layout Plain Layout
\noindent

    ft (SLValAssign (LArr _ _) _) f = f
\end_layout

\begin_layout Plain Layout
\noindent

    ft (SLValAssign lv t) f = copy (TVar t) (PVar lv) f
\end_layout

\begin_layout Plain Layout
\noindent

    ft (SLabel _) f = f
\end_layout

\begin_layout Plain Layout
\noindent

    ft (SExit) _ = mapEmpty
\end_layout

\begin_layout Plain Layout
\noindent

    ft (SGoto l ) f = mapSingleton l f
\end_layout

\begin_layout Plain Layout
\noindent

    ft (SIfThenElse _ tl fl) f = mkFactBase copyLattice [ (tl, f)
\end_layout

\begin_layout Plain Layout
\noindent

                                                        , (fl, f)]
\end_layout

\begin_layout Plain Layout
\noindent

    ft (SProcedure _ _ l) f = mapSingleton l f
\end_layout

\begin_layout Plain Layout
\noindent

    ft (SFun t _ _ l) f = mapSingleton l f
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Eeldusel, et abimuutujale omistatakse väärtus ainult üks kord, pole vaja
 sõlmes 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

SFun
\end_layout

\end_inset

 abimuutuja vastet tühistada (kood 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Koopia-ülek"

\end_inset

, rida 16), sest see on nii juba fakti algväärtustamisel.
 Kuna vahe-esituse koostamisel luuakse igale abimuutujale omistamisel unikaalne
 abimuutuja ja käesoleva töö ümberkirjutamistes ei muudeta abimuutujate
 omistamist, siis see eeldus on täidetud.
\end_layout

\begin_layout Standard
Ülejäänud sõlmedes ei toimu muutujale väärtuse omistamist ja seega kantakse
 fakt muutusteta üle (kood 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Koopia-ülek"

\end_inset

, read 10, 12, 15, 16).
\end_layout

\begin_layout Standard
Koodis 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Koopia-ümberk"

\end_inset

 on toodud koopia levitamise ümberkirjutamine 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

copyRewrite
\end_layout

\end_inset

.
 Kui sõlmes 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

STempAssign
\end_layout

\end_inset

 omistatakse abimuutujale 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

t
\end_layout

\end_inset

 avaldis 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

e
\end_layout

\end_inset

 (rida 5), mis sisaldab programmi muutujat, siis otsitakse faktist 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

f
\end_layout

\end_inset

 kopeeritud programmi muutuja 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

lv
\end_layout

\end_inset

, kasutades f-ni 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

lookupCopy
\end_layout

\end_inset

 (rida 6).
 Kui see leitakse, tagastatakse ümberkirjutatud sõlm 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

STempAssign
\end_layout

\end_inset

 (rida 7), milles omistatakse abimuutujale 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

t
\end_layout

\end_inset

 programmimuutujast 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

lv
\end_layout

\end_inset

 f-niga 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

fromLVal
\end_layout

\end_inset

 koostatud IR-avaldis.
\end_layout

\begin_layout Standard
Kui sõlmes 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

STempAssign
\end_layout

\end_inset

 omistatakse abimuutujale 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

t
\end_layout

\end_inset

 tehte 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

o
\end_layout

\end_inset

 operandidega 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

l
\end_layout

\end_inset

 ja 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

r
\end_layout

\end_inset

 väärtus (kood 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Koopia-ümberk"

\end_inset

, rida 8), siis f-niga 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

lookupTemp
\end_layout

\end_inset

 otsitakse võimalusel kopeeritud abimuutujad, vastavalt 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

l'
\end_layout

\end_inset

 ja 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

r'
\end_layout

\end_inset

 (read 9 ja 10), ja sõlm kirjutatakse ringi leitud operandidega (rida 11).
\end_layout

\begin_layout Standard
Sõlme 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

SLValAssign
\end_layout

\end_inset

, kus vasakul poolel on massiivi element indeksiga 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

i
\end_layout

\end_inset

, saab ringi kirjutada, kui leidub originaalne abimuutuja 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

i'
\end_layout

\end_inset

, mida 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

i
\end_layout

\end_inset

 kopeerib (kood 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Koopia-ümberk"

\end_inset

, read 12-15).
\end_layout

\begin_layout Standard
Sõlme 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

SLValAssign
\end_layout

\end_inset

, kus vasakule poolele omistatakse abimuutuja 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

t
\end_layout

\end_inset

 väärtus (kood 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Koopia-ümberk"

\end_inset

, rida 16), saab ümberkirjutada, kui 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

t
\end_layout

\end_inset

 on koopia abimuutujast 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

t'
\end_layout

\end_inset

 (rida 17).
 See reegel kehtib ka masiivi elemendi omistamise kohta.
\end_layout

\begin_layout Standard
Sõlme 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

SIfThenElse
\end_layout

\end_inset

, mille tõeväärtus on määratud abimuutujaga 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

t
\end_layout

\end_inset

 (kood 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Koopia-ümberk"

\end_inset

, rida 19), saab ümberkirjutada, kui leidub kopeeritud abimuutuja 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

t'
\end_layout

\end_inset

 (rida 20).
\end_layout

\begin_layout Standard
Protseduuride ja funktsioonide sõlmed kirjutatakse ringi (kood 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Koopia-ümberk"

\end_inset

, read 22-27), muutes argumentide jada 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

ts
\end_layout

\end_inset

 f-niga 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

lookupTemps
\end_layout

\end_inset

, mis on kirjeldatud eespool.
\end_layout

\begin_layout Standard
Ülejäänud sõlmedes ümberkirjutamist ei tehta (kood 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Koopia-ümberk"

\end_inset

, rida 28).
\end_layout

\begin_layout Standard
Koopia levitamise analüüsi sooritus 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

optCopy
\end_layout

\end_inset

 on sarnane sooritusega 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

optConst
\end_layout

\end_inset

: muutub kasutatud võre ja fakti tüüp, kuid graafi sisenemispunkt ja fakti
 algväärtustamine jääb samaks.
\end_layout

\begin_layout Standard
\noindent
\begin_inset listings
lstparams "basicstyle={\sffamily},float,language=Haskell,numbers=left"
inline false
status open

\begin_layout Plain Layout
\noindent

\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:Koopia-ümberk"

\end_inset

Koopia levitamine --- ümberkirjutamine
\end_layout

\end_inset

copyRewrite :: forall m.
 FuelMonad m => FwdRewrite m Stmnt CopyFact
\end_layout

\begin_layout Plain Layout
\noindent

copyRewrite = mkFRewrite rw
\end_layout

\begin_layout Plain Layout
\noindent

  where
\end_layout

\begin_layout Plain Layout
\noindent

    rw :: Stmnt e x -> CopyFact -> m (Maybe (Graph Stmnt e x))
\end_layout

\begin_layout Plain Layout
\noindent

    rw (STempAssign t e) f | isExprVar e = return $
\end_layout

\begin_layout Plain Layout
\noindent

      do (PVar lv) <- lookupCopy f (toPVar e)
\end_layout

\begin_layout Plain Layout
\noindent

         returnG $ STempAssign t (fromLVal lv)
\end_layout

\begin_layout Plain Layout
\noindent

    rw (STempAssign t (SOp o l r)) f = return $
\end_layout

\begin_layout Plain Layout
\noindent

      let l' = lookupTemp f l
\end_layout

\begin_layout Plain Layout
\noindent

          r' = lookupTemp f r
\end_layout

\begin_layout Plain Layout
\noindent

      in returnG $ STempAssign t (SOp o l' r')
\end_layout

\begin_layout Plain Layout
\noindent

    rw (SLValAssign (LArr a i) t) f
\end_layout

\begin_layout Plain Layout
\noindent

      | i /= i' = return $
\end_layout

\begin_layout Plain Layout
\noindent

          returnG $ SLValAssign (LArr a i') t
\end_layout

\begin_layout Plain Layout
\noindent

        where i' = lookupTemp f i
\end_layout

\begin_layout Plain Layout
\noindent

    rw (SLValAssign lv t) f = return $
\end_layout

\begin_layout Plain Layout
\noindent

      do (TVar t') <- lookupCopy f (TVar t)
\end_layout

\begin_layout Plain Layout
\noindent

         returnG $ SLValAssign lv t'
\end_layout

\begin_layout Plain Layout
\noindent

    rw (SIfThenElse t tl fl) f = return $
\end_layout

\begin_layout Plain Layout
\noindent

      do (TVar t') <- lookupCopy f (TVar t)
\end_layout

\begin_layout Plain Layout
\noindent

         returnG $ SIfThenElse t' tl fl
\end_layout

\begin_layout Plain Layout
\noindent

    rw (SProcedure p ts l) f = return $
\end_layout

\begin_layout Plain Layout
\noindent

      let ts' = lookupTemps f ts
\end_layout

\begin_layout Plain Layout
\noindent

      in returnG $ SProcedure p ts' l
\end_layout

\begin_layout Plain Layout
\noindent

    rw (SFun t p ts l) f = return $
\end_layout

\begin_layout Plain Layout
\noindent

      let ts' = lookupTemps f ts
\end_layout

\begin_layout Plain Layout
\noindent

      in returnG $ SFun t p ts' l
\end_layout

\begin_layout Plain Layout
\noindent

    rw _ _ = return Nothing
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Ühiste alamavaldiste eemaldamine
\end_layout

\begin_layout Standard
Kui avaldised sisaldavad ühiseid alamavaldisi, siis eeldusel, et alamavaldiste
 tulemus vahepeal ei muutu, võib nende alamavaldiste korduva arvutamise
 asemel arvutada neist esimese, salvestada tulemus ja järgnevate arvutamisel
 kasutada salvestatud väärtust.
 
\begin_inset CommandInset citation
LatexCommand cite
after "lk. 378"
key "muchnick'97"

\end_inset

 märgib, et mõningates olukordades võib tulemuse salvestamine olla kulukam
 kui uuesti arvutamine.
 Käesoleva töö vahe-esituses on avaldised nagunii lõhutud lihtsustatud alamavald
iseks, millede tulemused salvestatakse abimuutujatesse, ja seega antud optimeeri
mine ei tekita kulu registrite või mälupöördumiste kasutamise kaudu.
\end_layout

\begin_layout Standard
\noindent
\begin_inset listings
lstparams "basicstyle={\sffamily},float,language=Haskell,numbers=left"
inline false
status open

\begin_layout Plain Layout
\noindent

\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:CSE-fact"

\end_inset

Ühiste alamavaldiste eemaldamine --- andmevoo fakt
\end_layout

\end_inset

data AvailExprFact = AvailExprFact
\end_layout

\begin_layout Plain Layout
\noindent

  { refs :: Map TempVar SExpression
\end_layout

\begin_layout Plain Layout
\noindent

  , firstUsage :: Map SExpression (Maybe TempVar)
\end_layout

\begin_layout Plain Layout
\noindent

  }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\noindent

join _ (OldFact old) (NewFact new)
\end_layout

\begin_layout Plain Layout
\noindent

  = let combine = 
\backslash
u v -> if u == v then v else Nothing
\end_layout

\begin_layout Plain Layout
\noindent

        ref = Map.union (refs new) (refs old)
\end_layout

\begin_layout Plain Layout
\noindent

        first = Map.unionWith combine
\end_layout

\begin_layout Plain Layout
\noindent

                  (firstUsage new) (firstUsage old)
\end_layout

\begin_layout Plain Layout
\noindent

        f = AvailExprFact { refs = ref, firstUsage = first }
\end_layout

\begin_layout Plain Layout
\noindent

        ch = changeIf (old /= f)
\end_layout

\begin_layout Plain Layout
\noindent

    in (ch, f)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\noindent

lookupFirst :: AvailExprFact -> TempVar -> Maybe TempVar
\end_layout

\begin_layout Plain Layout
\noindent

lookupFirst f t =
\end_layout

\begin_layout Plain Layout
\noindent

  do w <- Map.lookup t (refs f)
\end_layout

\begin_layout Plain Layout
\noindent

     v <- Map.lookup w (firstUsage f)
\end_layout

\begin_layout Plain Layout
\noindent

     v
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Andmevoo faktis 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

AvailExprFact
\end_layout

\end_inset

 vastendatakse väljal 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

refs
\end_layout

\end_inset

 abimuutujad ja seniseks arvutatud lihtsustatud avaldised, mille väärtused
 on neisse abimuutujatesse salvestatud (kood 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:CSE-fact"

\end_inset

, rida 2).
 Väli 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

firstUsage
\end_layout

\end_inset

 vastendab lihtsustatud avaldise ja esimese abimuutuja (rida 3), kuhu arvutatud
 väärtus salvestati.
 Kasutatud on 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

Maybe
\end_layout

\end_inset

 mähist, et tähistada vasakule poolele omistamisele vastava avaldise tühistamist
 konstruktoriga 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

Nothing
\end_layout

\end_inset

.
 Kuna abimuutujatele antakse väärtus ainult üks kord, siis 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

refs
\end_layout

\end_inset

 välja puhul pole tühistamine oluline.
\end_layout

\begin_layout Standard
Koodis 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:CSE-fact"

\end_inset

 on näidatud võre 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

availLattice
\end_layout

\end_inset

 ülemraja leidmine f-niga 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

join
\end_layout

\end_inset

 (rida 6).
 Faktide 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

old
\end_layout

\end_inset

 ja 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

new
\end_layout

\end_inset

 väljad 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

refs
\end_layout

\end_inset

 liidetakse muutujaks 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

ref
\end_layout

\end_inset

 (rida 8), väljade 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

firstUsage
\end_layout

\end_inset

 liitmisel muutujaks 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

first
\end_layout

\end_inset

 tuleb arvestada, et kui vähemalt ühes neist on vaste tühistatud, siis liitunud
 vastendis oleks samuti vaste 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

Nothing
\end_layout

\end_inset

 (read 9-10).
 Muutujatest 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

ref
\end_layout

\end_inset

 ja 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

first
\end_layout

\end_inset

 koostatakse fakt 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

f
\end_layout

\end_inset

 (rida 11), mis on ülemrajaks (rida 13).
 Vihje 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

ChangeFlag
\end_layout

\end_inset

 saadakse faktide 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

old
\end_layout

\end_inset

 ja 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

f
\end_layout

\end_inset

 võrdlemisest (rida 12).
\end_layout

\begin_layout Standard
Faktist otsimine käib funktsiooniga 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

lookupFirst
\end_layout

\end_inset

 (kood 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:CSE-fact"

\end_inset

, rida 15): väljalt 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

refs
\end_layout

\end_inset

 otsitakse abimuutujale 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

t
\end_layout

\end_inset

 vastav lihtsustatud avaldis 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

w
\end_layout

\end_inset

 (rida 17), millele otsitakse väljalt 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

firstUsage
\end_layout

\end_inset

 esimene abimuutuja 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

v
\end_layout

\end_inset

 (rida 18), kuhu avaldise väärtus on salvestatud.
 Ümberkirjutamises saab abimuutuja 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

t
\end_layout

\end_inset

 asemel kasutada abimuutujat 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

v
\end_layout

\end_inset

, kui selline leidub.
 Sarnaselt koopia levitamise optimeerimisega, on kasulikud abif-nid 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

lookupTemp
\end_layout

\end_inset

, mis eemaldab 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

lookupFirst
\end_layout

\end_inset

 mähisest 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

Maybe
\end_layout

\end_inset

, ja 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

lookupTemps
\end_layout

\end_inset

, mis toimib abimuutujate jadal.
\end_layout

\begin_layout Standard
Koodis 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:CSE-transfer"

\end_inset

 on toodud ülekandef-n 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

availTransfer
\end_layout

\end_inset

.
 Aliaste probleemi vältimiseks ei muuda abimuutujale massiivi elemendile
 omistamine fakti (rida 5).
\end_layout

\begin_layout Standard
Abimuutujale teiste lihtsustatud avaldiste väärtuste omistamine lisab fakti
 väljale 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

refs
\end_layout

\end_inset

 vaste abimuutuja 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

t
\end_layout

\end_inset

 ja lihtsustatud avaldise 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

e
\end_layout

\end_inset

 vahel (kood 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:CSE-transfer"

\end_inset

, rida 7).
 Väljale 
\begin_inset listings
lstparams "basicstyle={\ttfamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

firstUsage
\end_layout

\end_inset

 salvestatakse seos avaldise 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

e
\end_layout

\end_inset

 ja abimuutuja 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

t
\end_layout

\end_inset

 vahel, kui seal juba ei ole mõnda muud abimuutujat (read 8-10).
\end_layout

\begin_layout Standard
Vasakule poolele omistamine tühistab fakti väljal 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

firstUsage
\end_layout

\end_inset

 programmi muutujale vastava lihtsustatud avaldise (kood 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:CSE-transfer"

\end_inset

, read 11-13).
\end_layout

\begin_layout Standard
Ülejäänud sõlmedes kantakse fakt muutusteta üle nagu pärisuuna analüüsi
 ülekandef-nides 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

noOptTransfer
\end_layout

\end_inset

 või 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

copyTransfer
\end_layout

\end_inset

.
 Kuigi funktsiooni väljakutse sõlmes 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

SFun
\end_layout

\end_inset

 omistatakse abimuutujale väljakutse tulemus, siis pole faktis selle abimuutuja
 tühistamine oluline, kuna abimuutujat väärtustatakse ainult üks kord.
 Väljakutse tulemust ei tohi salvestada hilisemaks ümberkirjutamiseks, kuna
 funktsiooni väljakutse võib omada kõrvalmõjusid ja seega tuleb iga väljakutse
 uuesti täita.
\end_layout

\begin_layout Standard
Koodis 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:CSE-rewrite"

\end_inset

 on toodud ülekandef-n 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

commonRewrite
\end_layout

\end_inset

.
 Kui sõlmes kasutatakse abimuutujat ja leidub mõni muu abimuutuja, mille
 väärtus on sama (read 9, 11, 15, 16, 18, 22, 24, 27), siis saab sõlme ringi
 kirjutada, kasutades leitud abimuutujat.
 Võrreldes 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

copyRewrite
\end_layout

\end_inset

-ga ei otsita programmimuutujatele ümberkirjutamiseks asendust.
\end_layout

\begin_layout Standard
\noindent
\begin_inset listings
lstparams "basicstyle={\sffamily},float,language=Haskell,numbers=left"
inline false
status open

\begin_layout Plain Layout
\noindent

\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:CSE-transfer"

\end_inset

Ühiste alamavaldiste eemaldamine --- ülekandefunktsioon
\end_layout

\end_inset

availTransfer :: FwdTransfer Stmnt AvailExprFact
\end_layout

\begin_layout Plain Layout
\noindent

availTransfer = mkFTransfer ft
\end_layout

\begin_layout Plain Layout
\noindent

  where
\end_layout

\begin_layout Plain Layout
\noindent

    ft :: Stmnt e x -> AvailExprFact -> Fact x AvailExprFact
\end_layout

\begin_layout Plain Layout
\noindent

    ft (STempAssign _ (SArrayItem _ _)) f = f
\end_layout

\begin_layout Plain Layout
\noindent

    ft (STempAssign t e) f =
\end_layout

\begin_layout Plain Layout
\noindent

      f { refs = Map.insert t e (refs f)
\end_layout

\begin_layout Plain Layout
\noindent

        , firstUsage = Map.insertWith
\end_layout

\begin_layout Plain Layout
\noindent

            (
\backslash
n o -> if o == Nothing then n else o)
\end_layout

\begin_layout Plain Layout
\noindent

            e (Just t) (firstUsage f) }
\end_layout

\begin_layout Plain Layout
\noindent

    ft (SLValAssign lv _) f =
\end_layout

\begin_layout Plain Layout
\noindent

      f { firstUsage = Map.insert (fromLVal lv)
\end_layout

\begin_layout Plain Layout
\noindent

                         Nothing (firstUsage f) } -- kill
\end_layout

\begin_layout Plain Layout
\noindent

    ft (SLabel _) f = f
\end_layout

\begin_layout Plain Layout
\noindent

    ft (SExit) _ = mapEmpty
\end_layout

\begin_layout Plain Layout
\noindent

    ft (SGoto l ) f = mapSingleton l f
\end_layout

\begin_layout Plain Layout
\noindent

    ft (SIfThenElse _ tl fl) f = mkFactBase availLattice [ (tl, f)
\end_layout

\begin_layout Plain Layout
\noindent

                                                         , (fl, f)]
\end_layout

\begin_layout Plain Layout
\noindent

    ft (SProcedure _ _ l) f = mapSingleton l f
\end_layout

\begin_layout Plain Layout
\noindent

    ft (SFun _ _ _ l) f = mapSingleton l f
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
\begin_inset listings
lstparams "basicstyle={\sffamily},float,language=Haskell,numbers=left"
inline false
status open

\begin_layout Plain Layout
\noindent

\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:CSE-rewrite"

\end_inset

Ühiste alamavaldiste eemaldamine --- ümberkirjutamine
\end_layout

\end_inset

commonRewrite :: forall m.
 FuelMonad m =>
\end_layout

\begin_layout Plain Layout
\noindent

                   FwdRewrite m Stmnt AvailExprFact
\end_layout

\begin_layout Plain Layout
\noindent

commonRewrite = mkFRewrite rw
\end_layout

\begin_layout Plain Layout
\noindent

  where
\end_layout

\begin_layout Plain Layout
\noindent

    rw :: Stmnt e x -> AvailExprFact -> m (Maybe (Graph Stmnt e x))
\end_layout

\begin_layout Plain Layout
\noindent

    rw (SLValAssign (LArr a i) t) f
\end_layout

\begin_layout Plain Layout
\noindent

      | i /= i' = return $
\end_layout

\begin_layout Plain Layout
\noindent

        returnG $ SLValAssign (LArr a i') t
\end_layout

\begin_layout Plain Layout
\noindent

      where i' = lookupTemp f i
\end_layout

\begin_layout Plain Layout
\noindent

    rw (SLValAssign lv t) f = return $
\end_layout

\begin_layout Plain Layout
\noindent

      do t' <- lookupFirst f t
\end_layout

\begin_layout Plain Layout
\noindent

         returnG $ SLValAssign lv t'
\end_layout

\begin_layout Plain Layout
\noindent

    rw (STempAssign t (SOp o l r)) f = return $ returnG $
\end_layout

\begin_layout Plain Layout
\noindent

      STempAssign t $ SOp o l' r'
\end_layout

\begin_layout Plain Layout
\noindent

        where l' = lookupTemp f l
\end_layout

\begin_layout Plain Layout
\noindent

              r' = lookupTemp f r
\end_layout

\begin_layout Plain Layout
\noindent

    rw (STempAssign t (SArrayItem a i)) f = return $
\end_layout

\begin_layout Plain Layout
\noindent

      do i' <- lookupFirst f i
\end_layout

\begin_layout Plain Layout
\noindent

         returnG $ STempAssign t (SArrayItem a i')
\end_layout

\begin_layout Plain Layout
\noindent

    rw (SIfThenElse t tl fl) f = return $
\end_layout

\begin_layout Plain Layout
\noindent

      do t' <- lookupFirst f t
\end_layout

\begin_layout Plain Layout
\noindent

         returnG $ SIfThenElse t' tl fl
\end_layout

\begin_layout Plain Layout
\noindent

    rw (SProcedure p ts l) f = return $ returnG $
\end_layout

\begin_layout Plain Layout
\noindent

      let ts' = lookupTemps f ts
\end_layout

\begin_layout Plain Layout
\noindent

      in SProcedure p ts' l
\end_layout

\begin_layout Plain Layout
\noindent

    rw (SFun t p ts l) f = return $ returnG $
\end_layout

\begin_layout Plain Layout
\noindent

      let ts' = lookupTemps f ts
\end_layout

\begin_layout Plain Layout
\noindent

      in SFun t p ts' l
\end_layout

\begin_layout Plain Layout
\noindent

    rw _ _ = return Nothing
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Surnud omistamiste eemaldamine
\end_layout

\begin_layout Standard
Omistamise sõlm on surnud, kui omistatud muutuja on selles sõlmes surnud.
 Muutuja on sõlmes surnud, kui järgnevates sõlmedes, kuni muutujale uue
 väärtuse omistamiseni või muutuja skoobi lõpuni, ei ole muutujat kasutatud.
 Surnud sõlmed võib graafist eemaldada, muutmata programmi tähendust.
\end_layout

\begin_layout Standard
\noindent
\begin_inset listings
lstparams "basicstyle={\sffamily},float,language=Haskell,numbers=left"
inline false
status open

\begin_layout Plain Layout
\noindent

\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:Live-lattice"

\end_inset

Surnud omistamiste eemaldamine --- andmevoo võre
\end_layout

\end_inset

type Live = Set Var
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\noindent

liveLattice :: DataflowLattice Live
\end_layout

\begin_layout Plain Layout
\noindent

liveLattice = DataflowLattice
\end_layout

\begin_layout Plain Layout
\noindent

  { fact_name = "Live variables"
\end_layout

\begin_layout Plain Layout
\noindent

  , fact_bot = Set.empty
\end_layout

\begin_layout Plain Layout
\noindent

  , fact_join = add
\end_layout

\begin_layout Plain Layout
\noindent

  } 
\end_layout

\begin_layout Plain Layout
\noindent

  where add _ (OldFact old) (NewFact new) = (ch, j)
\end_layout

\begin_layout Plain Layout
\noindent

        j = new `Set.union` old
\end_layout

\begin_layout Plain Layout
\noindent

        ch = changeIf (Set.size j > Set.size old)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
\begin_inset listings
lstparams "basicstyle={\sffamily},float,language=Haskell,numbers=left"
inline false
status open

\begin_layout Plain Layout
\noindent

\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:live-transfer"

\end_inset

Surnud omistamiste eemaldamine -- ülekandefunktsioon
\end_layout

\end_inset

liveness :: BwdTransfer Stmnt Live
\end_layout

\begin_layout Plain Layout
\noindent

liveness = mkBTransfer live
\end_layout

\begin_layout Plain Layout
\noindent

  where
\end_layout

\begin_layout Plain Layout
\noindent

    live :: Stmnt e x -> Fact x Live -> Live
\end_layout

\begin_layout Plain Layout
\noindent

    live (SLabel _) f = f
\end_layout

\begin_layout Plain Layout
\noindent

    live (STempAssign t e) f =
\end_layout

\begin_layout Plain Layout
\noindent

      case e of
\end_layout

\begin_layout Plain Layout
\noindent

        SVariable _ -> Set.insert (toPVar e) f'
\end_layout

\begin_layout Plain Layout
\noindent

        SArrayItem a i -> Set.insert (PVar (LVar a)) $
\end_layout

\begin_layout Plain Layout
\noindent

                          Set.insert (TVar i) f'
\end_layout

\begin_layout Plain Layout
\noindent

        SRecordField _ _ -> Set.insert (toPVar e) f'
\end_layout

\begin_layout Plain Layout
\noindent

        SOp _ l r -> Set.insert (TVar l) $ Set.insert (TVar r) f'
\end_layout

\begin_layout Plain Layout
\noindent

        _ -> f'
\end_layout

\begin_layout Plain Layout
\noindent

      where f' = Set.delete (TVar t) f
\end_layout

\begin_layout Plain Layout
\noindent

    live (SLValAssign lv t) f =
\end_layout

\begin_layout Plain Layout
\noindent

      case lv of
\end_layout

\begin_layout Plain Layout
\noindent

        LArr _ v -> Set.insert (TVar v) f'
\end_layout

\begin_layout Plain Layout
\noindent

        _ -> Set.delete (toPVar $ fromLVal lv) f'
\end_layout

\begin_layout Plain Layout
\noindent

      where f' = Set.insert (TVar t) f
\end_layout

\begin_layout Plain Layout
\noindent

    live (SGoto l) f = fact f l
\end_layout

\begin_layout Plain Layout
\noindent

    live (SIfThenElse t tl fl) f =
\end_layout

\begin_layout Plain Layout
\noindent

      Set.insert (TVar t) (fact f tl `Set.union` fact f fl)
\end_layout

\begin_layout Plain Layout
\noindent

    live (SProcedure _ ts l) f =
\end_layout

\begin_layout Plain Layout
\noindent

      fact f l `Set.union` Set.fromList (map TVar ts)
\end_layout

\begin_layout Plain Layout
\noindent

    live (SFun t _ ts l) f =
\end_layout

\begin_layout Plain Layout
\noindent

      (Set.delete (TVar t) (fact f l)) `Set.union`
\end_layout

\begin_layout Plain Layout
\noindent

      Set.fromList (map TVar ts)
\end_layout

\begin_layout Plain Layout
\noindent

    live SExit _ = Set.empty
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\noindent

fact :: FactBase Live -> Label -> Live
\end_layout

\begin_layout Plain Layout
\noindent

fact f l = fromMaybe Set.empty $ lookupFact l f
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Liikudes graafis vastupidiselt normaalse programmi täitmise suunaga, saab
 faktis talletada elus muutujad, st muutujad, millede väärtust kasutatakse,
 ja muutujale omistamisel selle suretada, st eemaldada faktist.
 Koodis 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Live-lattice"

\end_inset

 on esitatud andmevoo fakt 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

Live
\end_layout

\end_inset

 (rida 1) ja sellest ehitatud võre 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

liveLattice
\end_layout

\end_inset

 (rida 3).
 Võre alumine element on tühi hulk (rida 6) --- kõik muutujad on surnud.
 Kahe fakti vähim ülemtõke leitakse hulkade ühendamisega (rida 10), kusjuures
 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

ChangeFlag
\end_layout

\end_inset

 tüüpi lipp 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

ch
\end_layout

\end_inset

 saadakse Hoopl-teegi f-niga 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

changeIf
\end_layout

\end_inset

 hulkade suuruste võrdlusest (rida 11).
\end_layout

\begin_layout Standard
Vastusuuna analüüsi ülekandefunktsioon 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

liveness
\end_layout

\end_inset

 koostatakse f-niga 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

mkBTransfer
\end_layout

\end_inset

 (kood 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:live-transfer"

\end_inset

, rida 2).
 Võrreldes pärisuuna analüüsi f-niga 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

mkFTransfer
\end_layout

\end_inset

 on parameetri tüüp teine.
 Pärisuuna analüüsis on sisendiks sõlm ja sõlme sisenev fakt ning väljundiks
 tüübi perekonna 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

Fact
\end_layout

\end_inset

 eksemplar sõlmest väljumisel; vastusuuna analüüsis on sisendiks sõlm ja
 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

Fact
\end_layout

\end_inset

 eksemplar sõlmest väljumisel ning väljundiks fakt sõlme kohta (rida 4).
 Järgnevalt on kirjeldatud vastusuuna analüüsi osa, funktsiooni 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

live
\end_layout

\end_inset

, juhtumid.
\end_layout

\begin_layout Standard
Sõlm 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

SLabel
\end_layout

\end_inset

 ei muuda muutuja elusust ja seega fakti ei muudeta (kood 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:live-transfer"

\end_inset

, rida 5).
\end_layout

\begin_layout Standard
Sõlmes 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

STempAssign
\end_layout

\end_inset

 suretatakse (kood 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:live-transfer"

\end_inset

, rida 6), st eemaldatakse hulgast, abimuutuja 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

t
\end_layout

\end_inset

 faktist 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

f
\end_layout

\end_inset

, saades fakt 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

f'
\end_layout

\end_inset

 (rida 13), milles elustatakse, st lisatakse hulka, vastavalt avaldises
 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

e
\end_layout

\end_inset

 leiduvad abi- või programmimuutujad (read 8, 10, 11).
 Massiivimuutuja lisatakse hulka kui tavaline muutuja (rida 9), vältimaks
 aliaste probleemi elemendile omistamise ümberkirjutamises.
\end_layout

\begin_layout Standard
Omistades vasakule poolele 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

lv
\end_layout

\end_inset

 abimuutuja 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

t
\end_layout

\end_inset

 väärtus (kood 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:live-transfer"

\end_inset

, rida 15), lisatakse 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

t
\end_layout

\end_inset

 fakti, kust seejärel kustutatakse vasakust pooles olev programmimuutuja
 (rida 18).
 Kui vasakul poolel on massiivi element, siis lisatakse indeks 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

i
\end_layout

\end_inset

 abimuutujana hulka, kuid massiivimuutujat hulgast ei eemaldata (rida 17).
 Seega, kui kasvõi ühte elementi massiivist kasutatakse, on kogu massiiv
 koos kõigi elementidega elus.
\end_layout

\begin_layout Standard
Väljumisel suletud sõlme korral (kood 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:live-transfer"

\end_inset

, read 20, 21, 23, 25) on 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

live
\end_layout

\end_inset

 teiseks sisendiks märgendite-faktide vastend 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

FactBase
\end_layout

\end_inset

, kust Hoopl-teegi f-niga 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

lookupFact
\end_layout

\end_inset

 leitakse konkreetsele märgendile vastav fakt.
 F-n 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

fact
\end_layout

\end_inset

 täiendab f-ni 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

lookupFact
\end_layout

\end_inset

 vaikeväärtusega, tühi hulk, kui märgendi vaste puudus (read 30-31).
 Sõlmes 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

SGoto
\end_layout

\end_inset

 otsitakse märgendile 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

l
\end_layout

\end_inset

 vaste ning kuna sõlm ei muuda muutujate elusust, ongi see väljundiks (rida
 20).
\end_layout

\begin_layout Standard
Kui-siis-muidu sõlmes (kood 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:live-transfer"

\end_inset

, rida 21) ühendatakse tõese ja väära haru märgenditele vastad faktid ning
 lisatakse sinna tõeväärtuse abimuutuja kui elus muutuja (rida 22).
\end_layout

\begin_layout Standard
Protseduuri ja funktsiooni väljakutse lisavad väljakutsele järgnevale märgendile
 vastavale faktile argumentide jada abimuutujad (kood 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:live-transfer"

\end_inset

, read 24, 26-27).
 Funktsiooni väljakutse lisaks suretab abimuutuja (rida 26), kuhu salvestatakse
 väljakutsel tagastatav väärtus.
\end_layout

\begin_layout Standard
Sõlmele 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

SExit
\end_layout

\end_inset

 vastab alati tühi hulk elusaid muutujaid (kood 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:live-transfer"

\end_inset

, rida 28), kuna pole järgmist sõlme, kus neid saaks kasutada.
\end_layout

\begin_layout Standard
Ümberkirjutamine 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

deadAsstElim
\end_layout

\end_inset

 on toodud koodis 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Live-rewrite"

\end_inset

.
 Funktsioon 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

mkBRewrite
\end_layout

\end_inset

 tagab kütuse reeglitepärase kasutamise vastusuuna analüüsi ümberkirjutamises
 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

BwdRewrite
\end_layout

\end_inset

 (rida 2).
 Muutujale omistamise sõlm asendatakse tühja graafiga (read 6, 10, 12),
 kui muutuja ei ole elus muutujate hulgas.
 Ülejäänud olukordades ümberkirjutamist ei toimu (read 9, 13).
\end_layout

\begin_layout Standard
\noindent
\begin_inset listings
lstparams "basicstyle={\sffamily},float,language=Haskell,numbers=left"
inline false
status open

\begin_layout Plain Layout
\noindent

\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:Live-rewrite"

\end_inset

Surnud omistamiste eemaldamine --- ümberkirjutamine
\end_layout

\end_inset

deadAsstElim :: forall m .
 FuelMonad m => BwdRewrite m Stmnt Live
\end_layout

\begin_layout Plain Layout
\noindent

deadAsstElim = mkBRewrite d
\end_layout

\begin_layout Plain Layout
\noindent

  where
\end_layout

\begin_layout Plain Layout
\noindent

    d :: Stmnt e x -> Fact x Live -> m (Maybe (Graph Stmnt e x))
\end_layout

\begin_layout Plain Layout
\noindent

    d (STempAssign t _) live
\end_layout

\begin_layout Plain Layout
\noindent

      | not ((TVar t) `Set.member` live) = return $ Just emptyGraph
\end_layout

\begin_layout Plain Layout
\noindent

    d (SLValAssign (LArr a _) _) live = return $ 
\end_layout

\begin_layout Plain Layout
\noindent

      if (PVar (LVar a)) `Set.member` live
\end_layout

\begin_layout Plain Layout
\noindent

      then Nothing
\end_layout

\begin_layout Plain Layout
\noindent

      else Just emptyGraph
\end_layout

\begin_layout Plain Layout
\noindent

    d (SLValAssign lv _) live
\end_layout

\begin_layout Plain Layout
\noindent

      | not ((PVar lv) `Set.member` live) = return $ Just emptyGraph
\end_layout

\begin_layout Plain Layout
\noindent

    d _ _ = return Nothing
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Läbilangevate märgenditete eemaldamine
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\sffamily},float,language=Haskell,numbers=left"
inline false
status open

\begin_layout Plain Layout
\noindent

\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:Läbilangevate-võre"

\end_inset

Läbilangevate märgendite eemaldamine --- andmevoo võre
\end_layout

\end_inset

data FallThroughFact = FTF { eq :: Map Label Label
\end_layout

\begin_layout Plain Layout
\noindent

                           , cur :: Maybe Label }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\noindent

unknownFact :: FallThroughFact
\end_layout

\begin_layout Plain Layout
\noindent

unknownFact = FTF { eq = Map.empty, cur = Nothing }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\noindent

getFact :: FactBase FallThroughFact -> Label -> FallThroughFact
\end_layout

\begin_layout Plain Layout
\noindent

getFact f l = fromMaybe unknownFact $ lookupFact l f
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\noindent

exitingFact :: Label -> FallThroughFact -> FallThroughFact
\end_layout

\begin_layout Plain Layout
\noindent

exitingFact l f = f { cur = Just l }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\noindent

setMiddles :: FallThroughFact -> FallThroughFact
\end_layout

\begin_layout Plain Layout
\noindent

setMiddles f = f { cur = Nothing }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\noindent

enteringFact :: Label -> FallThroughFact -> FallThroughFact
\end_layout

\begin_layout Plain Layout
\noindent

enteringFact l f = f { eq = x, cur = Nothing }
\end_layout

\begin_layout Plain Layout
\noindent

  where x = case cur f of
\end_layout

\begin_layout Plain Layout
\noindent

              Just l' -> Map.insert l l' eq'
\end_layout

\begin_layout Plain Layout
\noindent

              _ -> eq'
\end_layout

\begin_layout Plain Layout
\noindent

        eq' = (eq f)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Kui plokk algab märgendiga, lõppeb hüppega mõnele muule plokile ja ei sisalda
 ühtki sõlme, siis on plokk sisuliselt tühi ning vastava ploki märgend 
\begin_inset Quotes gld
\end_inset

langeb läbi
\begin_inset Quotes grd
\end_inset

.
 Sellise ploki võib graafist eemaldada ja hüpped sellele plokile asendada
 hüppega järgnevale plokile, st märgendile, kuhu oleks tühja ploki lõpus
 hüpatud.
\end_layout

\begin_layout Standard
Liikudes graafis vastusuunas, jättes meelde märgend, millele ploki lõpus
 hüpatakse, kuid mis tühistatakse vahepealsete sõlme korral, saab selle
 ploki algusmärgendile jõudes vastandada meelde jäetud märgendiga.
 Koodis 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Läbilangevate-võre"

\end_inset

 on toodud fakti tüüp 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

FallThroughFact
\end_layout

\end_inset

 (read 1-2), mille konstruktori 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

FTF
\end_layout

\end_inset

 väli 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

eq
\end_layout

\end_inset

 vastandab läbilangevad märgendid ning väli 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

cur
\end_layout

\end_inset

 hoiab meeles analüüsitava ploki lõpus toimuva hüppe sihtmärgendit, kui
 plokk lõppeb sõlmega 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

SGoto
\end_layout

\end_inset

 ja kui vahepealsed sõlmed seda tühistanud pole.
 Tühjale faktile fastab f-n 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

unknownFact
\end_layout

\end_inset

 (read 4-5).
 Vastusuuna analüüsis märgendile fakti otsimist on täiendatud f-nis 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

getFact
\end_layout

\end_inset

 vaikimisi tühja faktiga (read 7-8).
 F-niga 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

exitingFact
\end_layout

\end_inset

 salvestatakse märgend fakti (read 10-11) ning f-niga 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

setMiddles
\end_layout

\end_inset

 tühistatakse see (read 13-14).
 Funktsioon 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

enteringFact
\end_layout

\end_inset

 lisab fakti vaste vaadeldava märgendi ja antud ploki lõpusõlme vahel (read
 16-21).
\end_layout

\begin_layout Standard
\noindent
\begin_inset listings
lstparams "basicstyle={\sffamily},float,language=Haskell,numbers=left"
inline false
status open

\begin_layout Plain Layout
\noindent

\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:Läbilangevad-ülekandefn"

\end_inset

Läbilangevate märgendite eemaldamine --- ülekandefunktsioon
\end_layout

\end_inset

fallThroughTransfer :: BwdTransfer Stmnt FallThroughFact
\end_layout

\begin_layout Plain Layout
\noindent

fallThroughTransfer = mkBTransfer bw
\end_layout

\begin_layout Plain Layout
\noindent

  where
\end_layout

\begin_layout Plain Layout
\noindent

    bw :: Stmnt e x -> Fact x FallThroughFact -> FallThroughFact
\end_layout

\begin_layout Plain Layout
\noindent

    bw (SLabel l) f = enteringFact l f
\end_layout

\begin_layout Plain Layout
\noindent

    bw (STempAssign _ _) f = setMiddles f
\end_layout

\begin_layout Plain Layout
\noindent

    bw (SLValAssign _ _) f = setMiddles f
\end_layout

\begin_layout Plain Layout
\noindent

    bw (SProcedure _ _ l) f = setMiddles (getFact f l)
\end_layout

\begin_layout Plain Layout
\noindent

    bw (SExit) _ = fact_bot fallThroughLattice
\end_layout

\begin_layout Plain Layout
\noindent

    bw (SGoto l) f = exitingFact l (getFact f l)
\end_layout

\begin_layout Plain Layout
\noindent

    bw (SIfThenElse _ tl fl) f =
\end_layout

\begin_layout Plain Layout
\noindent

      FTF { eq = (eq $ getFact f tl) `Map.union`
\end_layout

\begin_layout Plain Layout
\noindent

                 (eq $ getFact f fl), cur = Nothing }
\end_layout

\begin_layout Plain Layout
\noindent

    bw (SFun _ _ _ l) f = setMiddles (getFact f l)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Vastusuuna ülekandef-n on toodud koodis 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Läbilangevad-ülekandefn"

\end_inset

.
 Sisenemisel suletud sõlm 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

SLabel
\end_layout

\end_inset

 töötleb fakti f-niga 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

enteringFact
\end_layout

\end_inset

 (rida 5).
 Mõlemast otsast avatud sõlmed 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

STempAssign
\end_layout

\end_inset

, 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

SLValAssign
\end_layout

\end_inset

 märgivad f-niga 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

setMiddles
\end_layout

\end_inset

 fakti, et tegu pole sisult tühja plokiga (read 6-7).
 Väljumisel suletud sõlmedest salvestatakse märgend f-niga 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

exitingFact
\end_layout

\end_inset

 ainult sõlmes 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

SGoto
\end_layout

\end_inset

 (rida 10), kuna sõlmedes 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

SProcedure
\end_layout

\end_inset

 ja 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

SFun
\end_layout

\end_inset

 tehakse sisulist tööd, mis kohe tühistaks salvestuse f-niga 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

setMiddles
\end_layout

\end_inset

 (read 8, 14); sõlmes 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

SIfThenElse
\end_layout

\end_inset

 puudub (üldjuhul) ühene märgend, millele ploki lõpus hüpatakse, seega märgendit
 ei salvestata ning tõese ja väära harudele vastavad märgendite vasted ühendatak
se (read 12-13).
\end_layout

\begin_layout Standard
Koodis 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Läbilangevad-ümberk"

\end_inset

 on toodud ümberkirjutamine 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

fallThroughRewrite
\end_layout

\end_inset

.
 Väljumisel suletud sõlm on võimalik ringi kirjutada, kui leidub vaste sõlmes
 kasutatud märgendi(te)le (read 8, 14, 15, 18, 21).
\end_layout

\begin_layout Standard
\noindent
\begin_inset listings
lstparams "basicstyle={\sffamily},float,language=Haskell,numbers=left"
inline false
status open

\begin_layout Plain Layout
\noindent

\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:Läbilangevad-ümberk"

\end_inset

Läbilangevate märgendite eemaldamine --- ümberkirjutamine
\end_layout

\end_inset

fallThroughRewrite :: forall m.
 FuelMonad m =>
\end_layout

\begin_layout Plain Layout
\noindent

                        BwdRewrite m Stmnt FallThroughFact
\end_layout

\begin_layout Plain Layout
\noindent

fallThroughRewrite = mkBRewrite br
\end_layout

\begin_layout Plain Layout
\noindent

  where
\end_layout

\begin_layout Plain Layout
\noindent

    br :: Stmnt e x ->
\end_layout

\begin_layout Plain Layout
\noindent

            Fact x FallThroughFact -> m (Maybe (Graph Stmnt e x))
\end_layout

\begin_layout Plain Layout
\noindent

    br (SGoto l) facts = return $
\end_layout

\begin_layout Plain Layout
\noindent

      do l' <- Map.lookup l (eq (getFact facts l))
\end_layout

\begin_layout Plain Layout
\noindent

         returnG $ SGoto l'
\end_layout

\begin_layout Plain Layout
\noindent

    br (SIfThenElse t lt lf) facts = return $
\end_layout

\begin_layout Plain Layout
\noindent

      if ch then returnG $ SIfThenElse t lt' lf' else Nothing
\end_layout

\begin_layout Plain Layout
\noindent

      where
\end_layout

\begin_layout Plain Layout
\noindent

        look l = fromMaybe l $ Map.lookup l $ eq (getFact facts l)
\end_layout

\begin_layout Plain Layout
\noindent

        lt' = look lt
\end_layout

\begin_layout Plain Layout
\noindent

        lf' = look lf
\end_layout

\begin_layout Plain Layout
\noindent

        ch = (lt /= lt') || (lf /= lf')
\end_layout

\begin_layout Plain Layout
\noindent

    br (SProcedure p as l) facts = return $
\end_layout

\begin_layout Plain Layout
\noindent

      do l' <- Map.lookup l (eq (getFact facts l))
\end_layout

\begin_layout Plain Layout
\noindent

         returnG $ SProcedure p as l'
\end_layout

\begin_layout Plain Layout
\noindent

    br (SFun t f as l) facts = return $
\end_layout

\begin_layout Plain Layout
\noindent

      do l' <- Map.lookup l (eq (getFact facts l))
\end_layout

\begin_layout Plain Layout
\noindent

         returnG $ SFun t f as l'
\end_layout

\begin_layout Plain Layout
\noindent

    br _ _ = return Nothing
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Näiteprogrammi optimeerimine
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\sffamily},float,keywordstyle={\bfseries},language=Pascal"
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:Simple-pascal-näiteprogramm"

\end_inset


\emph on
Simple-Pascali
\emph default
 näiteprogramm
\end_layout

\end_inset

program example;
\end_layout

\begin_layout Plain Layout

type
\end_layout

\begin_layout Plain Layout

  TComplex = record
\end_layout

\begin_layout Plain Layout

    a: integer;
\end_layout

\begin_layout Plain Layout

    b: integer;
\end_layout

\begin_layout Plain Layout

  end;
\end_layout

\begin_layout Plain Layout

var
\end_layout

\begin_layout Plain Layout

  C1, C2: TComplex;
\end_layout

\begin_layout Plain Layout

  L1, L2, L3: integer;
\end_layout

\begin_layout Plain Layout

  I: integer;
\end_layout

\begin_layout Plain Layout

  X, Y: integer;
\end_layout

\begin_layout Plain Layout

  N, P, R: integer;
\end_layout

\begin_layout Plain Layout

function isqrt(X: integer): integer;
\end_layout

\begin_layout Plain Layout

begin writeln("undefined"); end;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

begin
\end_layout

\begin_layout Plain Layout

  C1.a := 4;
\end_layout

\begin_layout Plain Layout

  C1.b := 3;
\end_layout

\begin_layout Plain Layout

  X := C1.a;
\end_layout

\begin_layout Plain Layout

  Y := C1.b;
\end_layout

\begin_layout Plain Layout

  if X > Y then
\end_layout

\begin_layout Plain Layout

  begin
\end_layout

\begin_layout Plain Layout

    C2.a := 5;
\end_layout

\begin_layout Plain Layout

    C2.b := readln();
\end_layout

\begin_layout Plain Layout

  end else begin
\end_layout

\begin_layout Plain Layout

    C2.a := readln();
\end_layout

\begin_layout Plain Layout

    C2.b := 12;
\end_layout

\begin_layout Plain Layout

  end;
\end_layout

\begin_layout Plain Layout

  L1 := isqrt(C1.a * C1.a + C1.b * C1.b);
\end_layout

\begin_layout Plain Layout

  L2 := isqrt(C2.a * C2.a + C2.b * C2.b);
\end_layout

\begin_layout Plain Layout

  N := (C2.a - C1.a) * (C2.a - C1.a) +
\end_layout

\begin_layout Plain Layout

       (C2.b - C1.b) * (C2.b - C1.b);
\end_layout

\begin_layout Plain Layout

  R := N;
\end_layout

\begin_layout Plain Layout

  for I := 1 to 10 do
\end_layout

\begin_layout Plain Layout

  begin
\end_layout

\begin_layout Plain Layout

    P := R;
\end_layout

\begin_layout Plain Layout

    R := (R + N / R) / 2;
\end_layout

\begin_layout Plain Layout

    if R < P then
\end_layout

\begin_layout Plain Layout

      writeln(R)
\end_layout

\begin_layout Plain Layout

    else
\end_layout

\begin_layout Plain Layout

      break;
\end_layout

\begin_layout Plain Layout

  end;
\end_layout

\begin_layout Plain Layout

  L3 := P;
\end_layout

\begin_layout Plain Layout

  writeln(L3);
\end_layout

\begin_layout Plain Layout

end.
 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Koodis 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Simple-pascal-näiteprogramm"

\end_inset

 on esitatud 
\emph on
Simple-Pascali
\emph default
 näiteprogramm.
 Demonstreeritakse uue tüübi defineerimist, programmimuutujate deklareerimist,
 avaldiste arvutamist, kirje väljadele ja muutujatele omistamist ning nende
 väärtuste kasutamist, funktsiooni ja protseduuri väljakutseid, kui-siis-muidu
 hargnemist, loenduriga tsüklit ja selle katkestamist.
\end_layout

\begin_layout Standard
Koodis 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Näiteprogrammi-vahe-esitus"

\end_inset

 on toodud selle programmi vahe-esitus.
 Märgendid on tähistatud 
\begin_inset listings
lstparams "basicstyle={\sffamily}"
inline true
status open

\begin_layout Plain Layout

L
\end_layout

\end_inset

-iga, abimuutujad 
\begin_inset listings
lstparams "basicstyle={\sffamily}"
inline true
status open

\begin_layout Plain Layout

t
\end_layout

\end_inset

-ga.
 Plokk algab vasakule joondatud märgendiga, ploki sisu on taandega viidud
 paremale.
 Ploki sisus vastab ühele sõlmele üks rida.
 Sõlmede täitmise järjekord on ülevalt alla; ploki viimane sõlm kannab juhtvoo
 tähistatud märgendile või lõpetab programmi töö.
 Plokkide omavaheline järjekord ei oma tähtsust.
 Programmi täitmist alustatakse alati märgendist 
\begin_inset listings
lstparams "basicstyle={\sffamily}"
inline true
status open

\begin_layout Plain Layout

L1
\end_layout

\end_inset

.
 Funktsiooni 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Pascal"
inline true
status open

\begin_layout Plain Layout

isqrt
\end_layout

\end_inset

 vahe-esitust pole toodud, kuna optimeeritakse ainult programmi keha.
 Alljärgnevas optimeeritakse
\begin_inset Foot
status open

\begin_layout Plain Layout

Optimeerija kood on
\lang estonian
 saadaval veebis 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.tud.ttu.ee/~t073849/bsc/
\end_layout

\end_inset


\end_layout

\end_inset

 seda vahe-esitust, kusjuures iga soorituse väljund on järgneva soorituse
 sisendiks.
\end_layout

\begin_layout Standard
Koodis 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Näiteprogrammi-konstantide-volti"

\end_inset

 on näiteprogrammi vahe-esitus pärast konstantide voltimist ja levitamist
 sooritusega 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

optConst
\end_layout

\end_inset

.
 Plokis 
\begin_inset listings
lstparams "basicstyle={\sffamily}"
inline true
status open

\begin_layout Plain Layout

L1
\end_layout

\end_inset

 on konstant 4 levinud läbi 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Pascal"
inline true
status open

\begin_layout Plain Layout

C1.a
\end_layout

\end_inset

 abimuutujasse 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

t2
\end_layout

\end_inset

, sealt läbi programmimuutuja 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

X
\end_layout

\end_inset

 abimuutujasse 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

t4
\end_layout

\end_inset

.
 Samamoodi levis konstant 3 läbi 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Pascal"
inline true
status open

\begin_layout Plain Layout

C1.b
\end_layout

\end_inset

 abimuutujasse 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

t3
\end_layout

\end_inset

 ja sealt läbi programmimuutuja 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

Y
\end_layout

\end_inset

 abimuutujasse 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

t5
\end_layout

\end_inset

.
 Abimuutujale 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

t6
\end_layout

\end_inset

 on omistatud abimuutujate 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

t4
\end_layout

\end_inset

 ja 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

t5
\end_layout

\end_inset

 võrdluse tulemus ja kuna võrreldavad on konstantsed, siis võrdlus volditakse
 antud juhul konstandiks 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

True
\end_layout

\end_inset

.
 Seega järgnevas kui-siis-muidu hargnemises täidetakse alati tõene haru
 ja plokk märgendiga 
\begin_inset listings
lstparams "basicstyle={\sffamily}"
inline true
status open

\begin_layout Plain Layout

L4
\end_layout

\end_inset

 osutub surnud koodiks, mis visatakse minema (põhjendust vt.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Hoopli-analüüsi-sooritus"

\end_inset

).
 Sarnaselt käitutakse ülejäänud plokkides.
 Näiteks plokis 
\begin_inset listings
lstparams "basicstyle={\sffamily}"
inline true
status open

\begin_layout Plain Layout

L2
\end_layout

\end_inset

, volditi funktsiooni argumendile vastav avaldis lõplikult konstandiks.
 Tähelepanu tuleb juhtida plokile 
\begin_inset listings
lstparams "basicstyle={\sffamily}"
inline true
status open

\begin_layout Plain Layout

L7
\end_layout

\end_inset

, kus f-ni argumendile vastav avaldis volditi pooleldi: kui poleks ära visatud
 plokki 
\begin_inset listings
lstparams "basicstyle={\sffamily}"
inline true
status open

\begin_layout Plain Layout

L4
\end_layout

\end_inset

, ei oleks saanud avaldist voltida, kuna operandid ei ole mõlemas kui-siis-muidu
 harus konstantsed; kui oleks ära visatud plokk 
\begin_inset listings
lstparams "basicstyle={\sffamily}"
inline true
status open

\begin_layout Plain Layout

L3
\end_layout

\end_inset

 ploki 
\begin_inset listings
lstparams "basicstyle={\sffamily}"
inline true
status open

\begin_layout Plain Layout

L4
\end_layout

\end_inset

 asemel, oleks volditud avaldise teine pool 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Pascal"
inline true
status open

\begin_layout Plain Layout

C2.b * C2.b
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
Koodis 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Näiteprogrammi-ühiste-alamavaldi"

\end_inset

 eemaldati ühised alamavaldised.
 Plokis 
\begin_inset listings
lstparams "basicstyle={\sffamily}"
inline true
status open

\begin_layout Plain Layout

L1
\end_layout

\end_inset

 on muutujale 
\begin_inset listings
lstparams "basicstyle={\sffamily}"
inline true
status open

\begin_layout Plain Layout

X
\end_layout

\end_inset

 omistatud abimuutuja 
\begin_inset listings
lstparams "basicstyle={\sffamily}"
inline true
status open

\begin_layout Plain Layout

t0
\end_layout

\end_inset

, kuna seal kasutatakse seda avaldist, literaal 4, esimest korda.
 Samamoodi omistatakse muutujale 
\begin_inset listings
lstparams "basicstyle={\sffamily}"
inline true
status open

\begin_layout Plain Layout

Y
\end_layout

\end_inset

 abimuutuja 
\begin_inset listings
lstparams "basicstyle={\sffamily}"
inline true
status open

\begin_layout Plain Layout

t1
\end_layout

\end_inset

, kuna seal on esimest korda literaal 3.
 Plokis 
\begin_inset listings
lstparams "basicstyle={\sffamily}"
inline true
status open

\begin_layout Plain Layout

L7
\end_layout

\end_inset

 on abimuutujale 
\begin_inset listings
lstparams "basicstyle={\sffamily}"
inline true
status open

\begin_layout Plain Layout

t24
\end_layout

\end_inset

 omistamisel avaldise mõlemaks operandiks 
\begin_inset listings
lstparams "basicstyle={\sffamily}"
inline true
status open

\begin_layout Plain Layout

C2.b
\end_layout

\end_inset

, st abimuutuja 
\begin_inset listings
lstparams "basicstyle={\sffamily}"
inline true
status open

\begin_layout Plain Layout

t23
\end_layout

\end_inset

 kasutamise asemel saab kasutada abimuutujat 
\begin_inset listings
lstparams "basicstyle={\sffamily}"
inline true
status open

\begin_layout Plain Layout

t22
\end_layout

\end_inset

; plokis 
\begin_inset listings
lstparams "basicstyle={\sffamily}"
inline true
status open

\begin_layout Plain Layout

L8
\end_layout

\end_inset

 kasutatakse samuti abimuutujate 
\begin_inset listings
lstparams "basicstyle={\sffamily}"
inline true
status open

\begin_layout Plain Layout

t34
\end_layout

\end_inset

 ja 
\begin_inset listings
lstparams "basicstyle={\sffamily}"
inline true
status open

\begin_layout Plain Layout

t37
\end_layout

\end_inset

 asemel abimuutujat 
\begin_inset listings
lstparams "basicstyle={\sffamily}"
inline true
status open

\begin_layout Plain Layout

t22
\end_layout

\end_inset

.
 Lisaks on plokis 
\begin_inset listings
lstparams "basicstyle={\sffamily}"
inline true
status open

\begin_layout Plain Layout

L8
\end_layout

\end_inset

 ühised alamavaldised abimuutujates 
\begin_inset listings
lstparams "basicstyle={\sffamily}"
inline true
status open

\begin_layout Plain Layout

t36
\end_layout

\end_inset

 ja 
\begin_inset listings
lstparams "basicstyle={\sffamily}"
inline true
status open

\begin_layout Plain Layout

t39
\end_layout

\end_inset

, seega abimuutujale 
\begin_inset listings
lstparams "basicstyle={\sffamily}"
inline true
status open

\begin_layout Plain Layout

t40
\end_layout

\end_inset

 omistatud avaldise väärtuse arvutamiseks kasutatakse neist ainult esimest.
\end_layout

\begin_layout Standard
Koodis 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Näiteprogrammi-koopia-levitamine"

\end_inset

 on levitatud koopiaid.
 Plokkides 
\begin_inset listings
lstparams "basicstyle={\sffamily}"
inline true
status open

\begin_layout Plain Layout

L3
\end_layout

\end_inset

 ja 
\begin_inset listings
lstparams "basicstyle={\sffamily}"
inline true
status open

\begin_layout Plain Layout

L5
\end_layout

\end_inset

 kopeeritakse sisendist loetud väärtus, mis on salvestatud abimuutujas 
\begin_inset listings
lstparams "basicstyle={\sffamily}"
inline true
status open

\begin_layout Plain Layout

t8
\end_layout

\end_inset

, kirje väljale 
\begin_inset listings
lstparams "basicstyle={\sffamily}"
inline true
status open

\begin_layout Plain Layout

C2.b
\end_layout

\end_inset

.
 Ühiste alamavaldiste eemaldamise tulemusena vastas selle kirje välja väärtusele
 abimuutuja 
\begin_inset listings
lstparams "basicstyle={\sffamily}"
inline true
status open

\begin_layout Plain Layout

t22
\end_layout

\end_inset

, mis koopia levitamisel plokkides 
\begin_inset listings
lstparams "basicstyle={\sffamily}"
inline true
status open

\begin_layout Plain Layout

L7
\end_layout

\end_inset

 ja 
\begin_inset listings
lstparams "basicstyle={\sffamily}"
inline true
status open

\begin_layout Plain Layout

L8
\end_layout

\end_inset

 asendakse originaaliga 
\begin_inset listings
lstparams "basicstyle={\sffamily}"
inline true
status open

\begin_layout Plain Layout

t8
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
Koodis 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Näiteprogrammi-surnud-omistamist"

\end_inset

 on eemaldatud surnud omistamised.
 Eemaldati programmimuutujatele 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Pascal"
inline true
status open

\begin_layout Plain Layout

L1
\end_layout

\end_inset

 ja 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Pascal"
inline true
status open

\begin_layout Plain Layout

L2
\end_layout

\end_inset

 omistamised.
 Lihtne on veenduda näiteprogrammi põhjal koodis 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Simple-pascal-näiteprogramm"

\end_inset

, et neid muutujaid ei ole kasutatud, kuid säilitati neile vastavad abimuutujad
 
\begin_inset listings
lstparams "basicstyle={\sffamily}"
inline true
status open

\begin_layout Plain Layout

t18
\end_layout

\end_inset

 ja 
\begin_inset listings
lstparams "basicstyle={\sffamily}"
inline true
status open

\begin_layout Plain Layout

t26
\end_layout

\end_inset

, kuna neile omistatakse väärtus funktsiooni väljakutsetega, mis võivad
 omada kõrvalmõjusid, mis peavad säilima.
 Paljud omistamised 
\begin_inset Quotes gld
\end_inset

surid
\begin_inset Quotes grd
\end_inset

 eelnevate soorituste ümberkirjutamiste tulemusena --- sellest tähelepanekust
 on tingitud soorituste järjekord.
\end_layout

\begin_layout Standard
Koodis 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Optimeeritud-näiteprogramm"

\end_inset

 on toodud näiteprogrammi lõplikult optimeeritud vahe-esitus.
 Läbilangevate märgendite eemaldamise soorituses muudeti ploki 
\begin_inset listings
lstparams "basicstyle={\sffamily}"
inline true
status open

\begin_layout Plain Layout

L3
\end_layout

\end_inset

 lõpus oleva funktsiooni väljakutsest naasemise märgendiks 
\begin_inset listings
lstparams "basicstyle={\sffamily}"
inline true
status open

\begin_layout Plain Layout

L2
\end_layout

\end_inset

, kuna märgend 
\begin_inset listings
lstparams "basicstyle={\sffamily}"
inline true
status open

\begin_layout Plain Layout

L5
\end_layout

\end_inset

 langes läbi.
 Läbi langesid ka märgendid 
\begin_inset listings
lstparams "basicstyle={\sffamily}"
inline true
status open

\begin_layout Plain Layout

L18
\end_layout

\end_inset

, 
\begin_inset listings
lstparams "basicstyle={\sffamily}"
inline true
status open

\begin_layout Plain Layout

L20
\end_layout

\end_inset

 ja 
\begin_inset listings
lstparams "basicstyle={\sffamily}"
inline true
status open

\begin_layout Plain Layout

L21
\end_layout

\end_inset

 --- nende asemel on kasutatud vastavalt märgendeid 
\begin_inset listings
lstparams "basicstyle={\sffamily}"
inline true
status open

\begin_layout Plain Layout

L11
\end_layout

\end_inset

, 
\begin_inset listings
lstparams "basicstyle={\sffamily}"
inline true
status open

\begin_layout Plain Layout

L12
\end_layout

\end_inset

 ja 
\begin_inset listings
lstparams "basicstyle={\sffamily}"
inline true
status open

\begin_layout Plain Layout

L11
\end_layout

\end_inset

.
 Peale läbilängevate märgendite eemaldamist on vahe-esitust töödeldud soorituseg
a 
\begin_inset listings
lstparams "basicstyle={\sffamily},language=Haskell"
inline true
status open

\begin_layout Plain Layout

optNothing
\end_layout

\end_inset

, mis viskas minema surnud koodi plokid 
\begin_inset listings
lstparams "basicstyle={\sffamily}"
inline true
status open

\begin_layout Plain Layout

L5
\end_layout

\end_inset

, 
\begin_inset listings
lstparams "basicstyle={\sffamily}"
inline true
status open

\begin_layout Plain Layout

L18
\end_layout

\end_inset

, 
\begin_inset listings
lstparams "basicstyle={\sffamily}"
inline true
status open

\begin_layout Plain Layout

L20
\end_layout

\end_inset

 ja 
\begin_inset listings
lstparams "basicstyle={\sffamily}"
inline true
status open

\begin_layout Plain Layout

L21
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
twocolumn
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\sffamily}"
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:Näiteprogrammi-vahe-esitus"

\end_inset

Näiteprogrammi vahe-esitus
\end_layout

\end_inset

L1:
\end_layout

\begin_layout Plain Layout

    t0 <- 4
\end_layout

\begin_layout Plain Layout

    "C1"."a" := t0
\end_layout

\begin_layout Plain Layout

    t1 <- 3
\end_layout

\begin_layout Plain Layout

    "C1"."b" := t1
\end_layout

\begin_layout Plain Layout

    t2 <- "C1"."a"
\end_layout

\begin_layout Plain Layout

    "X" := t2
\end_layout

\begin_layout Plain Layout

    t3 <- "C1"."b"
\end_layout

\begin_layout Plain Layout

    "Y" := t3
\end_layout

\begin_layout Plain Layout

    t4 <- "X"
\end_layout

\begin_layout Plain Layout

    t5 <- "Y"
\end_layout

\begin_layout Plain Layout

    t6 <- t4 > t5
\end_layout

\begin_layout Plain Layout

    if t6 then L3 else L4
\end_layout

\begin_layout Plain Layout

L2:
\end_layout

\begin_layout Plain Layout

    t11 <- "C1"."a"
\end_layout

\begin_layout Plain Layout

    t12 <- "C1"."a"
\end_layout

\begin_layout Plain Layout

    t13 <- t11 * t12
\end_layout

\begin_layout Plain Layout

    t14 <- "C1"."b"
\end_layout

\begin_layout Plain Layout

    t15 <- "C1"."b"
\end_layout

\begin_layout Plain Layout

    t16 <- t14 * t15
\end_layout

\begin_layout Plain Layout

    t17 <- t13 + t16
\end_layout

\begin_layout Plain Layout

    t18 <- isqrt(t17) goto L7
\end_layout

\begin_layout Plain Layout

L3:
\end_layout

\begin_layout Plain Layout

    t7 <- 5
\end_layout

\begin_layout Plain Layout

    "C2"."a" := t7
\end_layout

\begin_layout Plain Layout

    t8 <- readln() goto L5
\end_layout

\begin_layout Plain Layout

L4:
\end_layout

\begin_layout Plain Layout

    t9 <- readln() goto L6
\end_layout

\begin_layout Plain Layout

L5:
\end_layout

\begin_layout Plain Layout

    "C2"."b" := t8
\end_layout

\begin_layout Plain Layout

    goto L2
\end_layout

\begin_layout Plain Layout

L6:
\end_layout

\begin_layout Plain Layout

    "C2"."a" := t9
\end_layout

\begin_layout Plain Layout

    t10 <- 12
\end_layout

\begin_layout Plain Layout

    "C2"."b" := t10
\end_layout

\begin_layout Plain Layout

    goto L2
\end_layout

\begin_layout Plain Layout

L7:
\end_layout

\begin_layout Plain Layout

    "L1" := t18
\end_layout

\begin_layout Plain Layout

    t19 <- "C2"."a"
\end_layout

\begin_layout Plain Layout

    t20 <- "C2"."a"
\end_layout

\begin_layout Plain Layout

    t21 <- t19 * t20
\end_layout

\begin_layout Plain Layout

    t22 <- "C2"."b"
\end_layout

\begin_layout Plain Layout

    t23 <- "C2"."b"
\end_layout

\begin_layout Plain Layout

    t24 <- t22 * t23
\end_layout

\begin_layout Plain Layout

    t25 <- t21 + t24
\end_layout

\begin_layout Plain Layout

    t26 <- isqrt(t25) goto L8
\end_layout

\begin_layout Plain Layout

L8:
\end_layout

\begin_layout Plain Layout

    "L2" := t26
\end_layout

\begin_layout Plain Layout

    t27 <- "C2"."a"
\end_layout

\begin_layout Plain Layout

    t28 <- "C1"."a"
\end_layout

\begin_layout Plain Layout

    t29 <- t27 - t28
\end_layout

\begin_layout Plain Layout

    t30 <- "C2"."a"
\end_layout

\begin_layout Plain Layout

    t31 <- "C1"."a"
\end_layout

\begin_layout Plain Layout

    t32 <- t30 - t31
\end_layout

\begin_layout Plain Layout

    t33 <- t29 * t32
\end_layout

\begin_layout Plain Layout

    t34 <- "C2"."b"
\end_layout

\begin_layout Plain Layout

    t35 <- "C1"."b"
\end_layout

\begin_layout Plain Layout

    t36 <- t34 - t35
\end_layout

\begin_layout Plain Layout

    t37 <- "C2"."b"
\end_layout

\begin_layout Plain Layout

    t38 <- "C1"."b"
\end_layout

\begin_layout Plain Layout

    t39 <- t37 - t38
\end_layout

\begin_layout Plain Layout

    t40 <- t36 * t39
\end_layout

\begin_layout Plain Layout

    t41 <- t33 + t40
\end_layout

\begin_layout Plain Layout

    "N" := t41
\end_layout

\begin_layout Plain Layout

    t42 <- "N"
\end_layout

\begin_layout Plain Layout

    "R" := t42
\end_layout

\begin_layout Plain Layout

    t43 <- 1
\end_layout

\begin_layout Plain Layout

    "I" := t43
\end_layout

\begin_layout Plain Layout

    t44 <- 10
\end_layout

\begin_layout Plain Layout

    "I~High" := t44
\end_layout

\begin_layout Plain Layout

    goto L9
\end_layout

\begin_layout Plain Layout

L9:
\end_layout

\begin_layout Plain Layout

    t45 <- "I"
\end_layout

\begin_layout Plain Layout

    t46 <- "I~High"
\end_layout

\begin_layout Plain Layout

    t47 <- t45 > t46
\end_layout

\begin_layout Plain Layout

    if t47 then L12 else L10
\end_layout

\begin_layout Plain Layout

L10:
\end_layout

\begin_layout Plain Layout

    t51 <- "R"
\end_layout

\begin_layout Plain Layout

    "P" := t51
\end_layout

\begin_layout Plain Layout

    t52 <- "R"
\end_layout

\begin_layout Plain Layout

    t53 <- "N"
\end_layout

\begin_layout Plain Layout

    t54 <- "R"
\end_layout

\begin_layout Plain Layout

    t55 <- t53 / t54
\end_layout

\begin_layout Plain Layout

    t56 <- t52 + t55
\end_layout

\begin_layout Plain Layout

    t57 <- 2
\end_layout

\begin_layout Plain Layout

    t58 <- t56 / t57
\end_layout

\begin_layout Plain Layout

    "R" := t58
\end_layout

\begin_layout Plain Layout

    t59 <- "R"
\end_layout

\begin_layout Plain Layout

    t60 <- "P"
\end_layout

\begin_layout Plain Layout

    t61 <- t59 < t60
\end_layout

\begin_layout Plain Layout

    if t61 then L19 else L20
\end_layout

\begin_layout Plain Layout

L11:
\end_layout

\begin_layout Plain Layout

    t48 <- "I"
\end_layout

\begin_layout Plain Layout

    t49 <- 1
\end_layout

\begin_layout Plain Layout

    t50 <- t48 + t49
\end_layout

\begin_layout Plain Layout

    "I" := t50
\end_layout

\begin_layout Plain Layout

    goto L9
\end_layout

\begin_layout Plain Layout

L12:
\end_layout

\begin_layout Plain Layout

    t63 <- "P"
\end_layout

\begin_layout Plain Layout

    "L3" := t63
\end_layout

\begin_layout Plain Layout

    t64 <- "L3"
\end_layout

\begin_layout Plain Layout

    writeln (t64) goto L23
\end_layout

\begin_layout Plain Layout

L18:
\end_layout

\begin_layout Plain Layout

    goto L11
\end_layout

\begin_layout Plain Layout

L19:
\end_layout

\begin_layout Plain Layout

    t62 <- "R"
\end_layout

\begin_layout Plain Layout

    writeln (t62) goto L21
\end_layout

\begin_layout Plain Layout

L20:
\end_layout

\begin_layout Plain Layout

    goto L12
\end_layout

\begin_layout Plain Layout

L21:
\end_layout

\begin_layout Plain Layout

    goto L18
\end_layout

\begin_layout Plain Layout

L22:
\end_layout

\begin_layout Plain Layout

    goto L18
\end_layout

\begin_layout Plain Layout

L23:
\end_layout

\begin_layout Plain Layout

    exit 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\sffamily}"
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:Näiteprogrammi-konstantide-volti"

\end_inset

Näiteprogrammi konstantide voltimine ja levitamine
\end_layout

\end_inset

L1:
\end_layout

\begin_layout Plain Layout

    t0 <- 4
\end_layout

\begin_layout Plain Layout

    "C1"."a" := t0
\end_layout

\begin_layout Plain Layout

    t1 <- 3
\end_layout

\begin_layout Plain Layout

    "C1"."b" := t1
\end_layout

\begin_layout Plain Layout

    t2 <- 4
\end_layout

\begin_layout Plain Layout

    "X" := t2
\end_layout

\begin_layout Plain Layout

    t3 <- 3
\end_layout

\begin_layout Plain Layout

    "Y" := t3
\end_layout

\begin_layout Plain Layout

    t4 <- 4
\end_layout

\begin_layout Plain Layout

    t5 <- 3
\end_layout

\begin_layout Plain Layout

    t6 <- True
\end_layout

\begin_layout Plain Layout

    goto L3
\end_layout

\begin_layout Plain Layout

L2:
\end_layout

\begin_layout Plain Layout

    t11 <- 4
\end_layout

\begin_layout Plain Layout

    t12 <- 4
\end_layout

\begin_layout Plain Layout

    t13 <- 16
\end_layout

\begin_layout Plain Layout

    t14 <- 3
\end_layout

\begin_layout Plain Layout

    t15 <- 3
\end_layout

\begin_layout Plain Layout

    t16 <- 9
\end_layout

\begin_layout Plain Layout

    t17 <- 25
\end_layout

\begin_layout Plain Layout

    t18 <- isqrt(t17) goto L7
\end_layout

\begin_layout Plain Layout

L3:
\end_layout

\begin_layout Plain Layout

    t7 <- 5
\end_layout

\begin_layout Plain Layout

    "C2"."a" := t7
\end_layout

\begin_layout Plain Layout

    t8 <- readln() goto L5
\end_layout

\begin_layout Plain Layout

L5:
\end_layout

\begin_layout Plain Layout

    "C2"."b" := t8
\end_layout

\begin_layout Plain Layout

    goto L2
\end_layout

\begin_layout Plain Layout

L7:
\end_layout

\begin_layout Plain Layout

    "L1" := t18
\end_layout

\begin_layout Plain Layout

    t19 <- 5
\end_layout

\begin_layout Plain Layout

    t20 <- 5
\end_layout

\begin_layout Plain Layout

    t21 <- 25
\end_layout

\begin_layout Plain Layout

    t22 <- "C2"."b"
\end_layout

\begin_layout Plain Layout

    t23 <- "C2"."b"
\end_layout

\begin_layout Plain Layout

    t24 <- t22 * t23
\end_layout

\begin_layout Plain Layout

    t25 <- t21 + t24
\end_layout

\begin_layout Plain Layout

    t26 <- isqrt(t25) goto L8
\end_layout

\begin_layout Plain Layout

L8:
\end_layout

\begin_layout Plain Layout

    "L2" := t26
\end_layout

\begin_layout Plain Layout

    t27 <- 5
\end_layout

\begin_layout Plain Layout

    t28 <- 4
\end_layout

\begin_layout Plain Layout

    t29 <- 1
\end_layout

\begin_layout Plain Layout

    t30 <- 5
\end_layout

\begin_layout Plain Layout

    t31 <- 4
\end_layout

\begin_layout Plain Layout

    t32 <- 1
\end_layout

\begin_layout Plain Layout

    t33 <- 1
\end_layout

\begin_layout Plain Layout

    t34 <- "C2"."b"
\end_layout

\begin_layout Plain Layout

    t35 <- 3
\end_layout

\begin_layout Plain Layout

    t36 <- t34 - t35
\end_layout

\begin_layout Plain Layout

    t37 <- "C2"."b"
\end_layout

\begin_layout Plain Layout

    t38 <- 3
\end_layout

\begin_layout Plain Layout

    t39 <- t37 - t38
\end_layout

\begin_layout Plain Layout

    t40 <- t36 * t39
\end_layout

\begin_layout Plain Layout

    t41 <- t33 + t40
\end_layout

\begin_layout Plain Layout

    "N" := t41
\end_layout

\begin_layout Plain Layout

    t42 <- "N"
\end_layout

\begin_layout Plain Layout

    "R" := t42
\end_layout

\begin_layout Plain Layout

    t43 <- 1
\end_layout

\begin_layout Plain Layout

    "I" := t43
\end_layout

\begin_layout Plain Layout

    t44 <- 10
\end_layout

\begin_layout Plain Layout

    "I~High" := t44
\end_layout

\begin_layout Plain Layout

    goto L9
\end_layout

\begin_layout Plain Layout

L9:
\end_layout

\begin_layout Plain Layout

    t45 <- "I"
\end_layout

\begin_layout Plain Layout

    t46 <- 10
\end_layout

\begin_layout Plain Layout

    t47 <- t45 > t46
\end_layout

\begin_layout Plain Layout

    if t47 then L12 else L10
\end_layout

\begin_layout Plain Layout

L10:
\end_layout

\begin_layout Plain Layout

    t51 <- "R"
\end_layout

\begin_layout Plain Layout

    "P" := t51
\end_layout

\begin_layout Plain Layout

    t52 <- "R"
\end_layout

\begin_layout Plain Layout

    t53 <- "N"
\end_layout

\begin_layout Plain Layout

    t54 <- "R"
\end_layout

\begin_layout Plain Layout

    t55 <- t53 / t54
\end_layout

\begin_layout Plain Layout

    t56 <- t52 + t55
\end_layout

\begin_layout Plain Layout

    t57 <- 2
\end_layout

\begin_layout Plain Layout

    t58 <- t56 / t57
\end_layout

\begin_layout Plain Layout

    "R" := t58
\end_layout

\begin_layout Plain Layout

    t59 <- "R"
\end_layout

\begin_layout Plain Layout

    t60 <- "P"
\end_layout

\begin_layout Plain Layout

    t61 <- t59 < t60
\end_layout

\begin_layout Plain Layout

    if t61 then L19 else L20
\end_layout

\begin_layout Plain Layout

L11:
\end_layout

\begin_layout Plain Layout

    t48 <- "I"
\end_layout

\begin_layout Plain Layout

    t49 <- 1
\end_layout

\begin_layout Plain Layout

    t50 <- t48 + t49
\end_layout

\begin_layout Plain Layout

    "I" := t50
\end_layout

\begin_layout Plain Layout

    goto L9
\end_layout

\begin_layout Plain Layout

L12:
\end_layout

\begin_layout Plain Layout

    t63 <- "P"
\end_layout

\begin_layout Plain Layout

    "L3" := t63
\end_layout

\begin_layout Plain Layout

    t64 <- "L3"
\end_layout

\begin_layout Plain Layout

    writeln (t64) goto L23
\end_layout

\begin_layout Plain Layout

L18:
\end_layout

\begin_layout Plain Layout

    goto L11
\end_layout

\begin_layout Plain Layout

L19:
\end_layout

\begin_layout Plain Layout

    t62 <- "R"
\end_layout

\begin_layout Plain Layout

    writeln (t62) goto L21
\end_layout

\begin_layout Plain Layout

L20:
\end_layout

\begin_layout Plain Layout

    goto L12
\end_layout

\begin_layout Plain Layout

L21:
\end_layout

\begin_layout Plain Layout

    goto L18
\end_layout

\begin_layout Plain Layout

L23:
\end_layout

\begin_layout Plain Layout

    exit 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\sffamily}"
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:Näiteprogrammi-ühiste-alamavaldi"

\end_inset

Näiteprogrammi ühiste alamavaldiste eemaldamine
\end_layout

\end_inset

L1:
\end_layout

\begin_layout Plain Layout

    t0 <- 4
\end_layout

\begin_layout Plain Layout

    "C1"."a" := t0
\end_layout

\begin_layout Plain Layout

    t1 <- 3
\end_layout

\begin_layout Plain Layout

    "C1"."b" := t1
\end_layout

\begin_layout Plain Layout

    t2 <- 4
\end_layout

\begin_layout Plain Layout

    "X" := t0
\end_layout

\begin_layout Plain Layout

    t3 <- 3
\end_layout

\begin_layout Plain Layout

    "Y" := t1
\end_layout

\begin_layout Plain Layout

    t4 <- 4
\end_layout

\begin_layout Plain Layout

    t5 <- 3
\end_layout

\begin_layout Plain Layout

    t6 <- True
\end_layout

\begin_layout Plain Layout

    goto L3
\end_layout

\begin_layout Plain Layout

L2:
\end_layout

\begin_layout Plain Layout

    t11 <- 4
\end_layout

\begin_layout Plain Layout

    t12 <- 4
\end_layout

\begin_layout Plain Layout

    t13 <- 16
\end_layout

\begin_layout Plain Layout

    t14 <- 3
\end_layout

\begin_layout Plain Layout

    t15 <- 3
\end_layout

\begin_layout Plain Layout

    t16 <- 9
\end_layout

\begin_layout Plain Layout

    t17 <- 25
\end_layout

\begin_layout Plain Layout

    t18 <- isqrt(t17) goto L7
\end_layout

\begin_layout Plain Layout

L3:
\end_layout

\begin_layout Plain Layout

    t7 <- 5
\end_layout

\begin_layout Plain Layout

    "C2"."a" := t7
\end_layout

\begin_layout Plain Layout

    t8 <- readln() goto L5
\end_layout

\begin_layout Plain Layout

L5:
\end_layout

\begin_layout Plain Layout

    "C2"."b" := t8
\end_layout

\begin_layout Plain Layout

    goto L2
\end_layout

\begin_layout Plain Layout

L7:
\end_layout

\begin_layout Plain Layout

    "L1" := t18
\end_layout

\begin_layout Plain Layout

    t19 <- 5
\end_layout

\begin_layout Plain Layout

    t20 <- 5
\end_layout

\begin_layout Plain Layout

    t21 <- 25
\end_layout

\begin_layout Plain Layout

    t22 <- "C2"."b"
\end_layout

\begin_layout Plain Layout

    t23 <- "C2"."b"
\end_layout

\begin_layout Plain Layout

    t24 <- t22 * t22
\end_layout

\begin_layout Plain Layout

    t25 <- t17 + t24
\end_layout

\begin_layout Plain Layout

    t26 <- isqrt(t25) goto L8
\end_layout

\begin_layout Plain Layout

L8:
\end_layout

\begin_layout Plain Layout

    "L2" := t26
\end_layout

\begin_layout Plain Layout

    t27 <- 5
\end_layout

\begin_layout Plain Layout

    t28 <- 4
\end_layout

\begin_layout Plain Layout

    t29 <- 1
\end_layout

\begin_layout Plain Layout

    t30 <- 5
\end_layout

\begin_layout Plain Layout

    t31 <- 4
\end_layout

\begin_layout Plain Layout

    t32 <- 1
\end_layout

\begin_layout Plain Layout

    t33 <- 1
\end_layout

\begin_layout Plain Layout

    t34 <- "C2"."b"
\end_layout

\begin_layout Plain Layout

    t35 <- 3
\end_layout

\begin_layout Plain Layout

    t36 <- t22 - t1
\end_layout

\begin_layout Plain Layout

    t37 <- "C2"."b"
\end_layout

\begin_layout Plain Layout

    t38 <- 3
\end_layout

\begin_layout Plain Layout

    t39 <- t22 - t1
\end_layout

\begin_layout Plain Layout

    t40 <- t36 * t36
\end_layout

\begin_layout Plain Layout

    t41 <- t29 + t40
\end_layout

\begin_layout Plain Layout

    "N" := t41
\end_layout

\begin_layout Plain Layout

    t42 <- "N"
\end_layout

\begin_layout Plain Layout

    "R" := t42
\end_layout

\begin_layout Plain Layout

    t43 <- 1
\end_layout

\begin_layout Plain Layout

    "I" := t29
\end_layout

\begin_layout Plain Layout

    t44 <- 10
\end_layout

\begin_layout Plain Layout

    "I~High" := t44
\end_layout

\begin_layout Plain Layout

    goto L9
\end_layout

\begin_layout Plain Layout

L9:
\end_layout

\begin_layout Plain Layout

    t45 <- "I"
\end_layout

\begin_layout Plain Layout

    t46 <- 10
\end_layout

\begin_layout Plain Layout

    t47 <- t45 > t44
\end_layout

\begin_layout Plain Layout

    if t47 then L12 else L10
\end_layout

\begin_layout Plain Layout

L10:
\end_layout

\begin_layout Plain Layout

    t51 <- "R"
\end_layout

\begin_layout Plain Layout

    "P" := t51
\end_layout

\begin_layout Plain Layout

    t52 <- "R"
\end_layout

\begin_layout Plain Layout

    t53 <- "N"
\end_layout

\begin_layout Plain Layout

    t54 <- "R"
\end_layout

\begin_layout Plain Layout

    t55 <- t42 / t51
\end_layout

\begin_layout Plain Layout

    t56 <- t51 + t55
\end_layout

\begin_layout Plain Layout

    t57 <- 2
\end_layout

\begin_layout Plain Layout

    t58 <- t56 / t57
\end_layout

\begin_layout Plain Layout

    "R" := t58
\end_layout

\begin_layout Plain Layout

    t59 <- "R"
\end_layout

\begin_layout Plain Layout

    t60 <- "P"
\end_layout

\begin_layout Plain Layout

    t61 <- t59 < t60
\end_layout

\begin_layout Plain Layout

    if t61 then L19 else L20
\end_layout

\begin_layout Plain Layout

L11:
\end_layout

\begin_layout Plain Layout

    t48 <- "I"
\end_layout

\begin_layout Plain Layout

    t49 <- 1
\end_layout

\begin_layout Plain Layout

    t50 <- t45 + t29
\end_layout

\begin_layout Plain Layout

    "I" := t50
\end_layout

\begin_layout Plain Layout

    goto L9
\end_layout

\begin_layout Plain Layout

L12:
\end_layout

\begin_layout Plain Layout

    t63 <- "P"
\end_layout

\begin_layout Plain Layout

    "L3" := t60
\end_layout

\begin_layout Plain Layout

    t64 <- "L3"
\end_layout

\begin_layout Plain Layout

    writeln (t64) goto L23
\end_layout

\begin_layout Plain Layout

L18:
\end_layout

\begin_layout Plain Layout

    goto L11
\end_layout

\begin_layout Plain Layout

L19:
\end_layout

\begin_layout Plain Layout

    t62 <- "R"
\end_layout

\begin_layout Plain Layout

    writeln (t59) goto L21
\end_layout

\begin_layout Plain Layout

L20:
\end_layout

\begin_layout Plain Layout

    goto L12
\end_layout

\begin_layout Plain Layout

L21:
\end_layout

\begin_layout Plain Layout

    goto L18
\end_layout

\begin_layout Plain Layout

L23:
\end_layout

\begin_layout Plain Layout

    exit 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\sffamily}"
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:Näiteprogrammi-koopia-levitamine"

\end_inset

Näiteprogrammi koopia levitamine
\end_layout

\end_inset

L1:
\end_layout

\begin_layout Plain Layout

    t0 <- 4
\end_layout

\begin_layout Plain Layout

    "C1"."a" := t0
\end_layout

\begin_layout Plain Layout

    t1 <- 3
\end_layout

\begin_layout Plain Layout

    "C1"."b" := t1
\end_layout

\begin_layout Plain Layout

    t2 <- 4
\end_layout

\begin_layout Plain Layout

    "X" := t0
\end_layout

\begin_layout Plain Layout

    t3 <- 3
\end_layout

\begin_layout Plain Layout

    "Y" := t1
\end_layout

\begin_layout Plain Layout

    t4 <- 4
\end_layout

\begin_layout Plain Layout

    t5 <- 3
\end_layout

\begin_layout Plain Layout

    t6 <- True
\end_layout

\begin_layout Plain Layout

    goto L3
\end_layout

\begin_layout Plain Layout

L2:
\end_layout

\begin_layout Plain Layout

    t11 <- 4
\end_layout

\begin_layout Plain Layout

    t12 <- 4
\end_layout

\begin_layout Plain Layout

    t13 <- 16
\end_layout

\begin_layout Plain Layout

    t14 <- 3
\end_layout

\begin_layout Plain Layout

    t15 <- 3
\end_layout

\begin_layout Plain Layout

    t16 <- 9
\end_layout

\begin_layout Plain Layout

    t17 <- 25
\end_layout

\begin_layout Plain Layout

    t18 <- isqrt(t17) goto L7
\end_layout

\begin_layout Plain Layout

L3:
\end_layout

\begin_layout Plain Layout

    t7 <- 5
\end_layout

\begin_layout Plain Layout

    "C2"."a" := t7
\end_layout

\begin_layout Plain Layout

    t8 <- readln() goto L5
\end_layout

\begin_layout Plain Layout

L5:
\end_layout

\begin_layout Plain Layout

    "C2"."b" := t8
\end_layout

\begin_layout Plain Layout

    goto L2
\end_layout

\begin_layout Plain Layout

L7:
\end_layout

\begin_layout Plain Layout

    "L1" := t18
\end_layout

\begin_layout Plain Layout

    t19 <- 5
\end_layout

\begin_layout Plain Layout

    t20 <- 5
\end_layout

\begin_layout Plain Layout

    t21 <- 25
\end_layout

\begin_layout Plain Layout

    t22 <- "C2"."b"
\end_layout

\begin_layout Plain Layout

    t23 <- "C2"."b"
\end_layout

\begin_layout Plain Layout

    t24 <- t8 * t8
\end_layout

\begin_layout Plain Layout

    t25 <- t17 + t24
\end_layout

\begin_layout Plain Layout

    t26 <- isqrt(t25) goto L8
\end_layout

\begin_layout Plain Layout

L8:
\end_layout

\begin_layout Plain Layout

    "L2" := t26
\end_layout

\begin_layout Plain Layout

    t27 <- 5
\end_layout

\begin_layout Plain Layout

    t28 <- 4
\end_layout

\begin_layout Plain Layout

    t29 <- 1
\end_layout

\begin_layout Plain Layout

    t30 <- 5
\end_layout

\begin_layout Plain Layout

    t31 <- 4
\end_layout

\begin_layout Plain Layout

    t32 <- 1
\end_layout

\begin_layout Plain Layout

    t33 <- 1
\end_layout

\begin_layout Plain Layout

    t34 <- "C2"."b"
\end_layout

\begin_layout Plain Layout

    t35 <- 3
\end_layout

\begin_layout Plain Layout

    t36 <- t8 - t1
\end_layout

\begin_layout Plain Layout

    t37 <- "C2"."b"
\end_layout

\begin_layout Plain Layout

    t38 <- 3
\end_layout

\begin_layout Plain Layout

    t39 <- t8 - t1
\end_layout

\begin_layout Plain Layout

    t40 <- t36 * t36
\end_layout

\begin_layout Plain Layout

    t41 <- t29 + t40
\end_layout

\begin_layout Plain Layout

    "N" := t41
\end_layout

\begin_layout Plain Layout

    t42 <- "N"
\end_layout

\begin_layout Plain Layout

    "R" := t41
\end_layout

\begin_layout Plain Layout

    t43 <- 1
\end_layout

\begin_layout Plain Layout

    "I" := t29
\end_layout

\begin_layout Plain Layout

    t44 <- 10
\end_layout

\begin_layout Plain Layout

    "I~High" := t44
\end_layout

\begin_layout Plain Layout

    goto L9
\end_layout

\begin_layout Plain Layout

L9:
\end_layout

\begin_layout Plain Layout

    t45 <- "I"
\end_layout

\begin_layout Plain Layout

    t46 <- 10
\end_layout

\begin_layout Plain Layout

    t47 <- t45 > t44
\end_layout

\begin_layout Plain Layout

    if t47 then L12 else L10
\end_layout

\begin_layout Plain Layout

L10:
\end_layout

\begin_layout Plain Layout

    t51 <- "R"
\end_layout

\begin_layout Plain Layout

    "P" := t51
\end_layout

\begin_layout Plain Layout

    t52 <- "R"
\end_layout

\begin_layout Plain Layout

    t53 <- "N"
\end_layout

\begin_layout Plain Layout

    t54 <- "R"
\end_layout

\begin_layout Plain Layout

    t55 <- t41 / t51
\end_layout

\begin_layout Plain Layout

    t56 <- t51 + t55
\end_layout

\begin_layout Plain Layout

    t57 <- 2
\end_layout

\begin_layout Plain Layout

    t58 <- t56 / t57
\end_layout

\begin_layout Plain Layout

    "R" := t58
\end_layout

\begin_layout Plain Layout

    t59 <- "R"
\end_layout

\begin_layout Plain Layout

    t60 <- "R"
\end_layout

\begin_layout Plain Layout

    t61 <- t58 < t58
\end_layout

\begin_layout Plain Layout

    if t61 then L19 else L20
\end_layout

\begin_layout Plain Layout

L11:
\end_layout

\begin_layout Plain Layout

    t48 <- "I"
\end_layout

\begin_layout Plain Layout

    t49 <- 1
\end_layout

\begin_layout Plain Layout

    t50 <- t45 + t29
\end_layout

\begin_layout Plain Layout

    "I" := t50
\end_layout

\begin_layout Plain Layout

    goto L9
\end_layout

\begin_layout Plain Layout

L12:
\end_layout

\begin_layout Plain Layout

    t63 <- "P"
\end_layout

\begin_layout Plain Layout

    "L3" := t60
\end_layout

\begin_layout Plain Layout

    t64 <- "L3"
\end_layout

\begin_layout Plain Layout

    writeln (t60) goto L23
\end_layout

\begin_layout Plain Layout

L18:
\end_layout

\begin_layout Plain Layout

    goto L11
\end_layout

\begin_layout Plain Layout

L19:
\end_layout

\begin_layout Plain Layout

    t62 <- "R"
\end_layout

\begin_layout Plain Layout

    writeln (t58) goto L21
\end_layout

\begin_layout Plain Layout

L20:
\end_layout

\begin_layout Plain Layout

    goto L12
\end_layout

\begin_layout Plain Layout

L21:
\end_layout

\begin_layout Plain Layout

    goto L18
\end_layout

\begin_layout Plain Layout

L23:
\end_layout

\begin_layout Plain Layout

    exit 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\sffamily}"
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:Näiteprogrammi-surnud-omistamist"

\end_inset

Näiteprogrammi surnud omistamiste eemaldamine
\end_layout

\end_inset

L1:
\end_layout

\begin_layout Plain Layout

    t1 <- 3
\end_layout

\begin_layout Plain Layout

    goto L3
\end_layout

\begin_layout Plain Layout

L2:
\end_layout

\begin_layout Plain Layout

    t17 <- 25
\end_layout

\begin_layout Plain Layout

    t18 <- isqrt(t17) goto L7
\end_layout

\begin_layout Plain Layout

L3:
\end_layout

\begin_layout Plain Layout

    t8 <- readln() goto L5
\end_layout

\begin_layout Plain Layout

L5:
\end_layout

\begin_layout Plain Layout

    goto L2
\end_layout

\begin_layout Plain Layout

L7:
\end_layout

\begin_layout Plain Layout

    t24 <- t8 * t8
\end_layout

\begin_layout Plain Layout

    t25 <- t17 + t24
\end_layout

\begin_layout Plain Layout

    t26 <- isqrt(t25) goto L8
\end_layout

\begin_layout Plain Layout

L8:
\end_layout

\begin_layout Plain Layout

    t29 <- 1
\end_layout

\begin_layout Plain Layout

    t36 <- t8 - t1
\end_layout

\begin_layout Plain Layout

    t40 <- t36 * t36
\end_layout

\begin_layout Plain Layout

    t41 <- t29 + t40
\end_layout

\begin_layout Plain Layout

    "R" := t41
\end_layout

\begin_layout Plain Layout

    "I" := t29
\end_layout

\begin_layout Plain Layout

    t44 <- 10
\end_layout

\begin_layout Plain Layout

    goto L9
\end_layout

\begin_layout Plain Layout

L9:
\end_layout

\begin_layout Plain Layout

    t45 <- "I"
\end_layout

\begin_layout Plain Layout

    t47 <- t45 > t44
\end_layout

\begin_layout Plain Layout

    if t47 then L12 else L10
\end_layout

\begin_layout Plain Layout

L10:
\end_layout

\begin_layout Plain Layout

    t51 <- "R"
\end_layout

\begin_layout Plain Layout

    t55 <- t41 / t51
\end_layout

\begin_layout Plain Layout

    t56 <- t51 + t55
\end_layout

\begin_layout Plain Layout

    t57 <- 2
\end_layout

\begin_layout Plain Layout

    t58 <- t56 / t57
\end_layout

\begin_layout Plain Layout

    "R" := t58
\end_layout

\begin_layout Plain Layout

    t60 <- "R"
\end_layout

\begin_layout Plain Layout

    t61 <- t58 < t58
\end_layout

\begin_layout Plain Layout

    if t61 then L19 else L20
\end_layout

\begin_layout Plain Layout

L11:
\end_layout

\begin_layout Plain Layout

    t50 <- t45 + t29
\end_layout

\begin_layout Plain Layout

    "I" := t50
\end_layout

\begin_layout Plain Layout

    goto L9
\end_layout

\begin_layout Plain Layout

L12:
\end_layout

\begin_layout Plain Layout

    writeln (t60) goto L23
\end_layout

\begin_layout Plain Layout

L18:
\end_layout

\begin_layout Plain Layout

    goto L11
\end_layout

\begin_layout Plain Layout

L19:
\end_layout

\begin_layout Plain Layout

    writeln (t58) goto L21
\end_layout

\begin_layout Plain Layout

L20:
\end_layout

\begin_layout Plain Layout

    goto L12
\end_layout

\begin_layout Plain Layout

L21:
\end_layout

\begin_layout Plain Layout

    goto L18
\end_layout

\begin_layout Plain Layout

L23:
\end_layout

\begin_layout Plain Layout

    exit 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\sffamily}"
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:Optimeeritud-näiteprogramm"

\end_inset

Optimeeritud näiteprogramm
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

L1:
\end_layout

\begin_layout Plain Layout

    t1 <- 3
\end_layout

\begin_layout Plain Layout

    goto L3
\end_layout

\begin_layout Plain Layout

L2:
\end_layout

\begin_layout Plain Layout

    t17 <- 25
\end_layout

\begin_layout Plain Layout

    t18 <- isqrt(t17) goto L7
\end_layout

\begin_layout Plain Layout

L3:
\end_layout

\begin_layout Plain Layout

    t8 <- readln() goto L2
\end_layout

\begin_layout Plain Layout

L7:
\end_layout

\begin_layout Plain Layout

    t24 <- t8 * t8
\end_layout

\begin_layout Plain Layout

    t25 <- t17 + t24
\end_layout

\begin_layout Plain Layout

    t26 <- isqrt(t25) goto L8
\end_layout

\begin_layout Plain Layout

L8:
\end_layout

\begin_layout Plain Layout

    t29 <- 1
\end_layout

\begin_layout Plain Layout

    t36 <- t8 - t1
\end_layout

\begin_layout Plain Layout

    t40 <- t36 * t36
\end_layout

\begin_layout Plain Layout

    t41 <- t29 + t40
\end_layout

\begin_layout Plain Layout

    "R" := t41
\end_layout

\begin_layout Plain Layout

    "I" := t29
\end_layout

\begin_layout Plain Layout

    t44 <- 10
\end_layout

\begin_layout Plain Layout

    goto L9
\end_layout

\begin_layout Plain Layout

L9:
\end_layout

\begin_layout Plain Layout

    t45 <- "I"
\end_layout

\begin_layout Plain Layout

    t47 <- t45 > t44
\end_layout

\begin_layout Plain Layout

    if t47 then L12 else L10
\end_layout

\begin_layout Plain Layout

L10:
\end_layout

\begin_layout Plain Layout

    t51 <- "R"
\end_layout

\begin_layout Plain Layout

    t55 <- t41 / t51
\end_layout

\begin_layout Plain Layout

    t56 <- t51 + t55
\end_layout

\begin_layout Plain Layout

    t57 <- 2
\end_layout

\begin_layout Plain Layout

    t58 <- t56 / t57
\end_layout

\begin_layout Plain Layout

    "R" := t58
\end_layout

\begin_layout Plain Layout

    t60 <- "R"
\end_layout

\begin_layout Plain Layout

    t61 <- t58 < t58
\end_layout

\begin_layout Plain Layout

    if t61 then L19 else L12
\end_layout

\begin_layout Plain Layout

L11:
\end_layout

\begin_layout Plain Layout

    t50 <- t45 + t29
\end_layout

\begin_layout Plain Layout

    "I" := t50
\end_layout

\begin_layout Plain Layout

    goto L9
\end_layout

\begin_layout Plain Layout

L12:
\end_layout

\begin_layout Plain Layout

    writeln (t60) goto L23
\end_layout

\begin_layout Plain Layout

L19:
\end_layout

\begin_layout Plain Layout

    writeln (t58) goto L11
\end_layout

\begin_layout Plain Layout

L23:
\end_layout

\begin_layout Plain Layout

    exit
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
onecolumn
\end_layout

\end_inset


\end_layout

\begin_layout Section
Kokkuvõte
\end_layout

\begin_layout Standard
Käesoleva töö eesmärgiks on lisada lihtsustatud Pascali kompilaatorile andmevooa
nalüüsil põhinev optimeerimine, kasutades selleks teeki Hoopl.
\end_layout

\begin_layout Standard
Töö esimene osa tutvustab kompilaatorit 
\emph on
Simple-Pascal
\emph default
 ja selle sisemist abstraktset süntaksipuud.
 Esitatakse nõuded andmevooanalüüsi teegi Hoopl rakendamiseks.
 Osa tulemuseks on Hoopl-teegiga töötlemiseks sobiv vahe-esitus ja vahend
 
\emph on
Simple-Pascali
\emph default
 ASTi transleerimiseks sellesse vahe-esitusse.
\end_layout

\begin_layout Standard
Teises osas tutvustakse detailsemalt Hoopl-teegi kasutamist.
 Kirjeldatakse lihtsamate andmevooanalüüsil põhinevate optimeerimiste andmevoo
 faktid, faktide kogumine ülekande funktsiooniga ja vahe-esituse ümberkirjutamin
e lähtudes kogutud faktidest.
 Töö tulemusena valmis optimeerija, mis sooritab andmevooanalüüsil põhinevad
 konstantide voltimise ja levitamise, koopiate levitamise, ühiste alamavaldiste
 eemaldamise, surnud omistamiste eemaldamise lihtsustamised.
 Optimeerija tööd demonstreeritakse näiteprogrammi varal.
\end_layout

\begin_layout Standard
Edasiseid arengusuundi on mitmeid.
 Antud töös ei genereeritud optimeeritud vahe-esitusest virtuaalmasinal
 käivitamiseks sobivat masinkoodi, st kompilaatori 
\emph on
Simple-Pascal
\emph default
 ja antud töö optimeerija väljundid pole vahetult võrreldavad.
 Täiendada võib ka 
\emph on
Simple-Pascali
\emph default
 võimalusi ning lähendada seda Pascal-keelele.
 Optimeerimised saab laiendada protseduurile / funktsioonidele ning lisada
 interprotseduurseid optimeerimisi.
 Võib uurida toodud optimeerimiste jõudlust ning võrrelda neid imperatiivsete
 realisatsioonidega.
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "inside'13"

\end_inset

Hoopl : Inside 206-105.
 [WWW] 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://blog.ezyang.com/category/ghc/hoopl/
\end_layout

\end_inset

 (05.07.2013)
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "muchnick'97"

\end_inset

Muchnick, S.
 S.
 Advanced Compiler Design And Implementation.
 San Francisco: Morgan Kaufmann, 1997
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "unique'13"

\end_inset

New monads/MonadUnique - HaskellWiki.
 [WWW] 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.haskell.org/haskellwiki/New_monads/MonadUnique
\end_layout

\end_inset

 (05.05.2013)
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "hoopl'10"

\end_inset

Ramsey N., Dias J., Jones, S.
 P.
 Hoopl: A Modular, Reusable Library for Dataflow Analysis and Transformation
 --- 
\emph on
ACM Haskell Symposium, Baltimore MD, United States, 2010/09/30
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "schw'09"

\end_inset

Schwartzbach, M.
 I.
 Lecture Notes on Static Analysis.
 University of Aarhus, Denmark, 2006
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
\start_of_appendix

\emph on
Simple-pascali
\emph default
 grammatika EBNF
\begin_inset Foot
status open

\begin_layout Plain Layout
Extended Backus–Naur Form, 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://standards.iso.org/ittf/PubliclyAvailableStandards/s026153_ISO_IEC_14977_199
6(E).zip
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "sec:Simple-pascal-grammatika-EBNF"

\end_inset


\end_layout

\begin_layout Standard
Grammatika algussümboliks on mitteterminaalne (ingl.
 nonterminal) sümbol 
\begin_inset listings
lstparams "basicstyle={\sffamily}"
inline true
status open

\begin_layout Plain Layout

program
\end_layout

\end_inset

.
\begin_inset listings
lstparams "basicstyle={\sffamily},breaklines=true"
inline false
status open

\begin_layout Plain Layout
\noindent

identifier = { ws }, ident start, { ident letter }, { ws } ;
\end_layout

\begin_layout Plain Layout

ident start = alpha-numeric | '_' ;
\end_layout

\begin_layout Plain Layout

ident letter = alpha-numeric | '_' | ? apostrophe ? ;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

ws = ? white space characters ? ;
\end_layout

\begin_layout Plain Layout

semi = ';', { ws } ;
\end_layout

\begin_layout Plain Layout

dot = '.', { ws } ;
\end_layout

\begin_layout Plain Layout

comma = ',', { ws } ;
\end_layout

\begin_layout Plain Layout

digit = '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' ;
\end_layout

\begin_layout Plain Layout

digit sequence = digit, { digit } ;
\end_layout

\begin_layout Plain Layout

sign = '-';
\end_layout

\begin_layout Plain Layout

integer = [sign], digit sequence ;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

program = 'program', ws, identifier, semi, [constants], [types], [variables],
 [procedures and functions], block, dot;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

constants = 'const', ws, constant declaration, { constant declaration }
 ;
\end_layout

\begin_layout Plain Layout

constant declaration = identifier, '=', expression, semi ;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

types = 'type', ws, type declaration, { type declaration } ;
\end_layout

\begin_layout Plain Layout

type declaration = identifier, '=', type, semi ;
\end_layout

\begin_layout Plain Layout

type = array type | record type | simple type ;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

array type = 'array', { ws }, '[', integer, ']', { ws }, of, ws, { ws },
 type ;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

record type = 'record', fields, 'end' ;
\end_layout

\begin_layout Plain Layout

fields = field, { semi, field } , [ semi ] ;
\end_layout

\begin_layout Plain Layout

field = identifier, ':', { ws }, type, { ws };
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

simple type = identifier;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

variables = 'var', ws, variable list, { variable list } ;
\end_layout

\begin_layout Plain Layout

variable list = variable names, ':', type , semi ;
\end_layout

\begin_layout Plain Layout

variable names = identifier, { comma, identifier } ;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

procedures and functions = { procedure | function } ;
\end_layout

\begin_layout Plain Layout

procedure = 'procedure', ws, identifier, parameter list, semi, [ variables
 ], block, semi ;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

function = 'function', ws, identifier , '(', parameter list, ')', ':', identifie
r, semi, [ variables ], block, semi ;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

parameter list = { identifier, colon, type };
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

block = 'begin', statements, 'end'
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

statements = statement, { semi, statement }, [ semi ] ;
\end_layout

\begin_layout Plain Layout

statement = if then else | assignment | procedure call | 'break' | 'continue'
 | 'exit' | return | for ;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

if then else = 'if', expression, 'then', ws, ( block | statement ), [ 'else',
 ( block | statement ) ] ;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

assignment = left hand side, ':=', expression ;
\end_layout

\begin_layout Plain Layout

left hand side = array item | record field | variable
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

array item = identifier, '[', expression, ']' ;
\end_layout

\begin_layout Plain Layout

record field = identifier, dot, identifier ;
\end_layout

\begin_layout Plain Layout

variable = identifier ;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

procedure call = identifier, '(', [ expressions ], ')' ;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

return = 'return', expression ;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

for = 'for', identifier, ':=', expression, 'to', expression, 'do', ( block
 | statement ) ;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

expressions = expression, { comma, expression } ;
\end_layout

\begin_layout Plain Layout

expression = simple expression, { relational operator, simple expression
 } ;
\end_layout

\begin_layout Plain Layout

simple expression = term, { adding operator, term } ;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

term = factor { multiplying operator, factor } ;
\end_layout

\begin_layout Plain Layout

factor = '(', expression, ')'| literal | function call | array item | record
 field | variable ;
\end_layout

\begin_layout Plain Layout

function call = identifier, '(', [ expressions ], ')' ;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

adding operator = '+' | '-' ;
\end_layout

\begin_layout Plain Layout

multiplying operator = '*' | '/' | '%' ;
\end_layout

\begin_layout Plain Layout

relational operator = '=' | '!=' | '>' | '<' ;
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
\noindent

\end_layout

\end_body
\end_document
